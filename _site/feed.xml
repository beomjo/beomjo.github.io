<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-09-26T21:29:07+09:00</updated><id>/feed.xml</id><title type="html">Beom Log</title><subtitle>beomjo amazing website.</subtitle><author><name>beomjo</name></author><entry><title type="html">Jekyll, minimal-mistakes 테마를 적용하기</title><link href="/blogs/create-blog/" rel="alternate" type="text/html" title="Jekyll, minimal-mistakes 테마를 적용하기" /><published>2021-06-29T00:00:00+09:00</published><updated>2021-06-29T00:00:00+09:00</updated><id>/blogs/create-blog</id><content type="html" xml:base="/blogs/create-blog/">&lt;h2 id=&quot;설정&quot;&gt;설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Github Pages 호스팅을 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${GITHUB_ID}.github.io&lt;/code&gt; 라는 이름으로 리파지토리를 생성해야 한다&lt;/li&gt;
  &lt;li&gt;Gem을 이용해서 Jekyll 을 설치한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테마-적용&quot;&gt;테마 적용&lt;/h2&gt;
&lt;p&gt;minimal-mistake &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/&quot;&gt;빠른 시작 가이드&lt;/a&gt;를 참고하여 진행한다.&lt;br /&gt;
&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot;&gt;minimal-mistake&lt;/a&gt; Repository에서 소스를 가져와 옮긴다.&lt;br /&gt;
옮긴 후 다음 과정을 진행한다.&lt;/p&gt;

&lt;h3 id=&quot;불필요-내용-제거&quot;&gt;불필요 내용 제거&lt;/h3&gt;
&lt;p&gt;minimal-mistakes-jekyll repository에서 소스를 가져왔다면 불필요한 내용을 제거한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;.editorconfig&lt;/li&gt;
  &lt;li&gt;.gitattributes&lt;/li&gt;
  &lt;li&gt;.github&lt;/li&gt;
  &lt;li&gt;/docs&lt;/li&gt;
  &lt;li&gt;/test&lt;/li&gt;
  &lt;li&gt;CHANGELOG.md&lt;/li&gt;
  &lt;li&gt;minimal-mistakes-jekyll.gemspec&lt;/li&gt;
  &lt;li&gt;README.md&lt;/li&gt;
  &lt;li&gt;screenshot-layouts.png&lt;/li&gt;
  &lt;li&gt;screenshot.png&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;_config-파일-설정&quot;&gt;_config 파일 설정&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yaml&lt;/code&gt; 파일에서 아래와 값들을 설정해준다&lt;/p&gt;

&lt;h4 id=&quot;기본-구성&quot;&gt;기본 구성&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site Settings
minimal_mistakes_skin    : &quot;dark&quot;
title                    : &quot;Beom Log&quot;
name                     : &quot;취미코딩하는 개발자&quot;
description              : &quot;회사에서는 월급 받고 집에서는 취미로 코딩하는 개발자의 블로그&quot;
url                      : &quot;https://beomjo.github.io&quot;
baseurl                  : # 서브 경로가 있는 경우 기재
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;teaser와-logo-그림-파일&quot;&gt;teaser와 logo 그림 파일&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;teaser                   : &quot;/assets/images/bio.jpg&quot;
logo                     : # 최상단 메뉴 바에 사이트 로고 넣기
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;댓글&quot;&gt;댓글&lt;/h4&gt;
&lt;p&gt;블로그 댓글 기능 disqus, discourse, facebook, staticman, utterances 정도가 대표적이다. &lt;br /&gt;
GitHub Pages 자체적으로 댓글을 제공하고 있지 않기때문에 보통 외부 댓글 서비스를 연결해주는 방식을 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;comments:
  provider               : # 블로그 댓글 기능 false (default), &quot;disqus&quot;, &quot;discourse&quot;, &quot;facebook&quot;, &quot;staticman&quot;, &quot;staticman_v2&quot;, &quot;utterances&quot;, &quot;custom&quot;
  disqus:
    shortname            : # 블로그 댓글 기능 https://help.disqus.com/customer/portal/articles/466208-what-s-a-shortname-
  discourse:
    server               : # https://meta.discourse.org/t/embedding-discourse-comments-via-javascript/31963 , e.g.: meta.discourse.org
  facebook:
    # https://developers.facebook.com/docs/plugins/comments
    appid                :
    num_posts            : # 5 (default)
    colorscheme          : # &quot;light&quot; (default), &quot;dark&quot;
  utterances:
    theme                : # &quot;github-light&quot; (default), &quot;github-dark&quot;
    issue_term           : # &quot;pathname&quot; (default)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;저자-설정&quot;&gt;저자 설정&lt;/h4&gt;
&lt;p&gt;minimal-mistakes theme은 사이트 좌측 사이드바에 기본으로 사이트 저자 소개를 설정한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site Author
author:
  name             : &quot;beomjo&quot;
  avatar           : &quot;/assets/images/bio-photo.jpg&quot;
  bio              : &quot;beomjo dev log 🧑‍💻&quot;
  location         : &quot;South Korea&quot;
  email            :
  links:
    - label: &quot;Email&quot;
      icon: &quot;fas fa-fw fa-envelope-square&quot;
      url: &quot;qjatjr1108@gmail.com&quot;
    - label: &quot;Blog&quot;
      icon: &quot;fas fa-fw fa-link&quot;
      url: &quot;https://beomseok95.tistory.com/&quot;
    - label: &quot;GitHub&quot;
      icon: &quot;fab fa-fw fa-github&quot;
      url: &quot;https://github.com/beomjo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;저자-설정---footer&quot;&gt;저자 설정 - Footer&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site Footer
footer:
  links:
    - label: &quot;GitHub&quot;
      icon: &quot;fab fa-fw fa-github&quot;
      url: &quot;https://github.com/beomjo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;블로그-표시방법-설정&quot;&gt;블로그 표시방법 설정&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Outputting
permalink: /:categories/:title/
paginate: 5 # 첫 페이지에보여줄 최근 게시물 수를 지정
paginate_path: /page:num/
timezone: Asia/Seoul # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;포스트-쓰기&quot;&gt;포스트 쓰기&lt;/h2&gt;
&lt;p&gt;포스트는 특정 제목으로 작성되어야 한다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-{TITLE}.md&lt;/code&gt; 형식으로 파일명을 작성한다 . 
메타데이터를 위한 yaml 부분을 상단에작성하고, 본문을 위한 마크다운 부분을 그 아래에 작성한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: Jekyll, minimal-mistakes 테마를 적용하기
categories:
  - Blogs
tags:
  - Blog
  - Jekyll
  - minimal-mistakes
toc: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>beomjo</name></author><category term="Blogs" /><category term="Jekyll" /><category term="minimal-mistakes" /><summary type="html">설정 Github Pages 호스팅을 위해 ${GITHUB_ID}.github.io 라는 이름으로 리파지토리를 생성해야 한다 Gem을 이용해서 Jekyll 을 설치한다</summary></entry><entry><title type="html">BOJ 1874. 스택수열</title><link href="/boj/boj-1874/" rel="alternate" type="text/html" title="BOJ 1874. 스택수열" /><published>2021-02-01T00:00:00+09:00</published><updated>2021-02-01T00:00:00+09:00</updated><id>/boj/boj-1874</id><content type="html" xml:base="/boj/boj-1874/">&lt;h1 id=&quot;boj-1874-스택-수열&quot;&gt;&lt;strong&gt;BOJ 1874. 스택 수열&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134807944-b729b1d3-f874-4571-b8a6-dcc81ed99389.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134807958-7dbfe12b-0611-44bd-b9f5-46b40999aaf8.png&quot; alt=&quot;image&quot; /&gt;
​&lt;/p&gt;
&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;입력으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4 3 6 8 7 5 2 1&lt;/code&gt;으로 주어졌을 때 &lt;br /&gt;
먼저 1부터 시작하여 4까지 Stack에 순서대로 push(+)한다.
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134807961-a882cbd5-2a36-4408-8569-d91a81d63a66.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
​
입력인 4가 되었을 때 Stack에서 pop(-)&lt;br /&gt;
또 다음 입력인 3이 되었을 때 Stack에서 pop(-)한다.&lt;br /&gt;
​&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134807983-9c4f22dc-6bfe-4303-9d50-98fc9f947f55.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
​
다음 입력인 6이 될 때까지 Stack에 다시 push(+)&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134807998-ab2f82e5-ae36-4f1e-8af6-220e1b81a2ac.png&quot; alt=&quot;image&quot; /&gt;
​
입력인 6에 도달하였으니 pop(-) &lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134808026-83a16014-ac3d-4199-bbc0-74544130df82.png&quot; alt=&quot;image&quot; /&gt;
​
위와 같이 반복한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;
import java.util.Stack;
​
class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        Stack&amp;lt;Integer&amp;gt; stack = new Stack&amp;lt;&amp;gt;();
        int total = Integer.parseInt(br.readLine());
        int i = 1;
        while (total-- &amp;gt; 0) {
            int input = Integer.parseInt(br.readLine());
            while (i &amp;lt;= input) {
                stack.push(i);
                sb.append(&quot;+\n&quot;);
                i++;
            }
​
            if (stack.peek() == input) {
                stack.pop();
                sb.append(&quot;-\n&quot;);
            } else {
                System.out.print(&quot;NO&quot;);
                return;
            }
        }
        System.out.println(sb);
        br.close();
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.StringBuilder
import java.util.*
​
fun main() {
    val stack = Stack&amp;lt;Int&amp;gt;()
    val sb = StringBuilder()
    var i = 1;
    repeat(readLine()?.toInt() ?: return) {
        val input = readLine()!!.toInt()
        while (i &amp;lt;= input) {
            stack.push(i)
            sb.append(&quot;+\n&quot;)
            i++
        }
        if (stack.peek() == input) {
            stack.pop()
            sb.append(&quot;-\n&quot;)
        } else {
            print(&quot;NO&quot;)
            return
        }
    }
    println(sb)
    return
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/1874.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/1874.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/1874.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/1874.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 1874. 스택 수열 ​ 풀이 입력으로 4 3 6 8 7 5 2 1으로 주어졌을 때 먼저 1부터 시작하여 4까지 Stack에 순서대로 push(+)한다. ​ 입력인 4가 되었을 때 Stack에서 pop(-) 또 다음 입력인 3이 되었을 때 Stack에서 pop(-)한다. ​ ​ 다음 입력인 6이 될 때까지 Stack에 다시 push(+) ​ 입력인 6에 도달하였으니 pop(-) ​ 위와 같이 반복한다. import java.io.*; import java.util.Stack; ​ class Main { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); StringBuilder sb = new StringBuilder(); Stack&amp;lt;Integer&amp;gt; stack = new Stack&amp;lt;&amp;gt;(); int total = Integer.parseInt(br.readLine()); int i = 1; while (total-- &amp;gt; 0) { int input = Integer.parseInt(br.readLine()); while (i &amp;lt;= input) { stack.push(i); sb.append(&quot;+\n&quot;); i++; } ​ if (stack.peek() == input) { stack.pop(); sb.append(&quot;-\n&quot;); } else { System.out.print(&quot;NO&quot;); return; } } System.out.println(sb); br.close(); return; } } ​ import java.lang.StringBuilder import java.util.* ​ fun main() { val stack = Stack&amp;lt;Int&amp;gt;() val sb = StringBuilder() var i = 1; repeat(readLine()?.toInt() ?: return) { val input = readLine()!!.toInt() while (i &amp;lt;= input) { stack.push(i) sb.append(&quot;+\n&quot;) i++ } if (stack.peek() == input) { stack.pop() sb.append(&quot;-\n&quot;) } else { print(&quot;NO&quot;) return } } println(sb) return } ​ 풀이 소스 github.com/beomjo/algorithm-study/blob/main/BOJ/java/1874.java github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/1874.kt</summary></entry><entry><title type="html">BOJ 9012. 괄호</title><link href="/boj/boj-9012/" rel="alternate" type="text/html" title="BOJ 9012. 괄호" /><published>2021-01-20T00:00:00+09:00</published><updated>2021-01-20T00:00:00+09:00</updated><id>/boj/boj-9012</id><content type="html" xml:base="/boj/boj-9012/">&lt;h2 id=&quot;boj9012괄호&quot;&gt;&lt;strong&gt;BOJ 9012. 괄호&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;문제&quot;&gt;&lt;strong&gt;문제&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;괄호 문자열(Parenthesis String, PS)은 두 개의 괄호 기호인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt; 만으로 구성되어 있는 문자열이다. 그중에서 괄호의 모양이 바르게 구성된 문자열을 올바른 괄호 문자열(Valid PS, VPS)이라고 부른다. &lt;br /&gt;
한 쌍의 괄호 기호로 된 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;( )&lt;/code&gt; 문자열은 기본 VPS이라고 부른다. 만일 x 가 VPS 라면 이것을 하나의 괄호에 넣은 새로운 문자열 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(x)&lt;/code&gt;도 VPS 가 된다. 그리고 두 VPS x와 y를 접합(concatenation)시킨 새로운 문자열 xy도 VPS 가 된다. &lt;br /&gt;
예를 들어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(())()&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;((()))&lt;/code&gt; 는 VPS이지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(()(”, “(())()))&lt;/code&gt; , 그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(()&lt;/code&gt; 는 모두 VPS 가 아닌 문자열이다. &lt;/p&gt;

&lt;p&gt;여러분은 입력으로 주어진 괄호 문자열이 VPS 인지 아닌지를 판단해서 그 결과를 YES 와 NO로 나타내어야 한다. &lt;/p&gt;

&lt;h3 id=&quot;입력&quot;&gt;&lt;strong&gt;입력&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;입력 데이터는 표준 입력을 사용한다. 입력은 T개의 테스트 데이터로 주어진다. 입력의 첫 번째 줄에는 입력 데이터의 수를 나타내는 정수 T가 주어진다. 각 테스트 데이터의 첫째 줄에는 괄호 문자열이 한 줄에 주어진다. 하나의 괄호 문자열의 길이는 2 이상 50 이하이다. &lt;/p&gt;

&lt;h3 id=&quot;출력&quot;&gt;&lt;strong&gt;출력&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;출력은 표준 출력을 사용한다. 만일 입력 괄호 문자열이 올바른 괄호 문자열(VPS)이면 “YES”, 아니면 “NO”를 한 줄에 하나씩 차례대로 출력해야 한다. &lt;/p&gt;

&lt;h3 id=&quot;예제입력1&quot;&gt;&lt;strong&gt;예제 입력 1&lt;/strong&gt; &lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;6
(())())
(((()())()
(()())((()))
((()()(()))(((())))()
()()()()(()()())()
(()((())()(
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;예제출력1&quot;&gt;&lt;strong&gt;예제 출력 1&lt;/strong&gt; &lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NO
NO
YES
NO
YES
NO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;예제입력2&quot;&gt;&lt;strong&gt;예제 입력 2&lt;/strong&gt; &lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3
((
))
())(()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;예제출력2&quot;&gt;&lt;strong&gt;예제 출력 2&lt;/strong&gt; &lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NO
NO
NO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Stack을 이용하여 올바른 괄호 문자열인지 판한단다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt; 가 나오면 스택에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt;를 넣는다&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt; 가 나오면 스택에서 하나를 뺄 수 있는지 확인하여 뺀다
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Main {
  public static void main(String[] args) throws IOException {
      BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
      int total = Integer.parseInt(bufferedReader.readLine());
      BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(System.out));

      while (total-- &amp;gt; 0) {
          Stack&amp;lt;Character&amp;gt; stack = new Stack&amp;lt;&amp;gt;();
          String input = bufferedReader.readLine();
          boolean isVPS = true;
          for (int i = 0; i &amp;lt; input.length(); i++) {
              char c = input.charAt(i);
              if (c == '(') {
                  stack.push(c);
              } else {
                  if (!stack.isEmpty()) {
                      stack.pop();
                  } else {
                      isVPS = false;
                      break;
                  }
              }
          }
          if (!stack.isEmpty()) {
              isVPS = false;
          }

          bufferedWriter.write(isVPS ? &quot;YES\n&quot; : &quot;NO\n&quot;);
      }
      bufferedWriter.flush();
      return;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;코틀린 풀이&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    repeat(readLine()?.toInt() ?: return) {
        var prev = readLine()!!
        var curr = prev.replace(&quot;()&quot;, &quot;&quot;)

        while (prev != curr) {
            prev = curr
            curr = curr.replace(&quot;()&quot;, &quot;&quot;)
        }
        println(if (curr.isEmpty()) &quot;YES&quot; else &quot;NO&quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 9012. 괄호</summary></entry><entry><title type="html">BOJ 9093. 단어 뒤집기</title><link href="/boj/boj-9093/" rel="alternate" type="text/html" title="BOJ 9093. 단어 뒤집기" /><published>2021-01-19T00:00:00+09:00</published><updated>2021-01-19T00:00:00+09:00</updated><id>/boj/boj-9093</id><content type="html" xml:base="/boj/boj-9093/">&lt;h1 id=&quot;boj-9093-단어-뒤집기&quot;&gt;BOJ 9093. 단어 뒤집기&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/9093&quot;&gt;www.acmicpc.net/problem/9093&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제&quot;&gt;&lt;strong&gt;문제&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;문장이 주어졌을 때, 단어를 모두 뒤집어서 출력하는 프로그램을 작성하시오. &lt;br /&gt;
단, 단어의 순서는 바꿀 수 없다. &lt;br /&gt;
단어는 영어 알파벳으로만 이루어져 있다.&lt;/p&gt;

&lt;h2 id=&quot;입력&quot;&gt;&lt;strong&gt;입력&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;첫째 줄에 테스트 케이스의 개수 T가 주어진다. &lt;br /&gt;
각 테스트 케이스는 한 줄로 이루어져 있으며, 문장이 하나 주어진다. &lt;br /&gt;
단어의 길이는 최대 20, 문장의 길이는 최대 1000이다. &lt;br /&gt;
단어와 단어 사이에는 공백이 하나 있다.&lt;/p&gt;

&lt;h2 id=&quot;출력&quot;&gt;&lt;strong&gt;출력&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;각 테스트 케이스에 대해서, 입력으로 주어진 문장의 단어를 모두 뒤집어 출력한다.&lt;/p&gt;

&lt;h2 id=&quot;예제입력1&quot;&gt;&lt;strong&gt;예제 입력 1&lt;/strong&gt; &lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2
I am happy today
We want to win the first prize
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;예제-출력-1&quot;&gt;&lt;strong&gt;예제 출력 1&lt;/strong&gt; &lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I ma yppah yadot
eW tnaw ot niw eht tsrif ezirp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;N개의 글자를 스택에 넣었다가 빼면 순서가 역순이 된다&lt;/li&gt;
  &lt;li&gt;알파벳을 스택에 넣고, 공백이나 문자열의 끝이면 스택에서 모두 빼내서 역순으로 만든다&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;
import java.util.Stack;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();
        Stack&amp;lt;Character&amp;gt; stack = new Stack&amp;lt;&amp;gt;();
        sc.nextLine(); //sc.nextInt() 후에 \n이 남아있어서 Clear

        while (t-- &amp;gt; 0) {
            String input = sc.nextLine() + &quot; &quot;;
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i &amp;lt; input.length(); i++) {
                char c = input.charAt(i);
                if (c == ' ') {
                    while (!stack.isEmpty()) {
                        sb.append(stack.pop());
                    }
                    sb.append(&quot; &quot;);
                } else {
                    stack.push(c);
                }
            }
            System.out.println(sb.toString());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Scanner의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextInt()&lt;/code&gt; 메서드는 입력의 가장 마지막 개행 문자(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt;)를 제거하지 않아  
바로 다음 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nextLine()&lt;/code&gt;을 호출하면 제대로 문자열을 입력받지 못하는 문제가 있다.&lt;br /&gt;
BufferedReader를 사용하여보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;
import java.util.Stack;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        int num = Integer.parseInt(bf.readLine());
        Stack&amp;lt;Character&amp;gt; stack = new Stack&amp;lt;Character&amp;gt;();
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        while (num-- &amp;gt; 0) {
            String input = bf.readLine() + &quot;\n&quot;;
            for (char ch : input.toCharArray()) {
                if (ch == ' ' || ch == '\n') {
                    while (!stack.isEmpty()) {
                        bw.write(stack.pop());
                    }
                    bw.write(ch); // 공백
                } else
                    stack.push(ch);
            }
        }
        bw.flush();
        return;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Scanner는 space와 개행 문자(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt;)를 경계로 인식하여 구분하는 반면&lt;br /&gt;
BufferedReader는 개행 문자(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt;)만으로 경계를 구분하고 문자열만을 읽는다.&lt;/p&gt;

&lt;p&gt;또한 Scanner에 비하여 상대적으로 빠른 속도의 장점이 있다.&lt;/p&gt;

&lt;p&gt;Kotlin으로 작성하면 Stack을 사용하지 않고  &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;split()&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;joinToString()&lt;/code&gt; 그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reversed()&lt;/code&gt; 함수를 사용하여 작성할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    var t = br.readLine().toInt()

    while(t-- &amp;gt; 0) {
        val input = br.readLine().split(&quot; &quot;)
        println(input.joinToString(&quot; &quot;) { it.reversed() })
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/9093.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/9093.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/9093.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/9093.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 9093. 단어 뒤집기 www.acmicpc.net/problem/9093</summary></entry></feed>