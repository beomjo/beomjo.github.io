<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-09-27T00:58:36+09:00</updated><id>/feed.xml</id><title type="html">Beom Log</title><subtitle>beomjo amazing website.</subtitle><author><name>beomjo</name></author><entry><title type="html">Jekyll, minimal-mistakes 테마를 적용하기</title><link href="/blogs/create-blog/" rel="alternate" type="text/html" title="Jekyll, minimal-mistakes 테마를 적용하기" /><published>2021-06-29T00:00:00+09:00</published><updated>2021-06-29T00:00:00+09:00</updated><id>/blogs/create-blog</id><content type="html" xml:base="/blogs/create-blog/">&lt;h2 id=&quot;설정&quot;&gt;설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Github Pages 호스팅을 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${GITHUB_ID}.github.io&lt;/code&gt; 라는 이름으로 리파지토리를 생성해야 한다&lt;/li&gt;
  &lt;li&gt;Gem을 이용해서 Jekyll 을 설치한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테마-적용&quot;&gt;테마 적용&lt;/h2&gt;
&lt;p&gt;minimal-mistake &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/&quot;&gt;빠른 시작 가이드&lt;/a&gt;를 참고하여 진행한다.&lt;br /&gt;
&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot;&gt;minimal-mistake&lt;/a&gt; Repository에서 소스를 가져와 옮긴다.&lt;br /&gt;
옮긴 후 다음 과정을 진행한다.&lt;/p&gt;

&lt;h3 id=&quot;불필요-내용-제거&quot;&gt;불필요 내용 제거&lt;/h3&gt;
&lt;p&gt;minimal-mistakes-jekyll repository에서 소스를 가져왔다면 불필요한 내용을 제거한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;.editorconfig&lt;/li&gt;
  &lt;li&gt;.gitattributes&lt;/li&gt;
  &lt;li&gt;.github&lt;/li&gt;
  &lt;li&gt;/docs&lt;/li&gt;
  &lt;li&gt;/test&lt;/li&gt;
  &lt;li&gt;CHANGELOG.md&lt;/li&gt;
  &lt;li&gt;minimal-mistakes-jekyll.gemspec&lt;/li&gt;
  &lt;li&gt;README.md&lt;/li&gt;
  &lt;li&gt;screenshot-layouts.png&lt;/li&gt;
  &lt;li&gt;screenshot.png&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;_config-파일-설정&quot;&gt;_config 파일 설정&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yaml&lt;/code&gt; 파일에서 아래와 값들을 설정해준다&lt;/p&gt;

&lt;h4 id=&quot;기본-구성&quot;&gt;기본 구성&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site Settings
minimal_mistakes_skin    : &quot;dark&quot;
title                    : &quot;Beom Log&quot;
name                     : &quot;취미코딩하는 개발자&quot;
description              : &quot;회사에서는 월급 받고 집에서는 취미로 코딩하는 개발자의 블로그&quot;
url                      : &quot;https://beomjo.github.io&quot;
baseurl                  : # 서브 경로가 있는 경우 기재
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;teaser와-logo-그림-파일&quot;&gt;teaser와 logo 그림 파일&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;teaser                   : &quot;/assets/images/bio.jpg&quot;
logo                     : # 최상단 메뉴 바에 사이트 로고 넣기
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;댓글&quot;&gt;댓글&lt;/h4&gt;
&lt;p&gt;블로그 댓글 기능 disqus, discourse, facebook, staticman, utterances 정도가 대표적이다. &lt;br /&gt;
GitHub Pages 자체적으로 댓글을 제공하고 있지 않기때문에 보통 외부 댓글 서비스를 연결해주는 방식을 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;comments:
  provider               : # 블로그 댓글 기능 false (default), &quot;disqus&quot;, &quot;discourse&quot;, &quot;facebook&quot;, &quot;staticman&quot;, &quot;staticman_v2&quot;, &quot;utterances&quot;, &quot;custom&quot;
  disqus:
    shortname            : # 블로그 댓글 기능 https://help.disqus.com/customer/portal/articles/466208-what-s-a-shortname-
  discourse:
    server               : # https://meta.discourse.org/t/embedding-discourse-comments-via-javascript/31963 , e.g.: meta.discourse.org
  facebook:
    # https://developers.facebook.com/docs/plugins/comments
    appid                :
    num_posts            : # 5 (default)
    colorscheme          : # &quot;light&quot; (default), &quot;dark&quot;
  utterances:
    theme                : # &quot;github-light&quot; (default), &quot;github-dark&quot;
    issue_term           : # &quot;pathname&quot; (default)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;저자-설정&quot;&gt;저자 설정&lt;/h4&gt;
&lt;p&gt;minimal-mistakes theme은 사이트 좌측 사이드바에 기본으로 사이트 저자 소개를 설정한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site Author
author:
  name             : &quot;beomjo&quot;
  avatar           : &quot;/assets/images/bio-photo.jpg&quot;
  bio              : &quot;beomjo dev log 🧑‍💻&quot;
  location         : &quot;South Korea&quot;
  email            :
  links:
    - label: &quot;Email&quot;
      icon: &quot;fas fa-fw fa-envelope-square&quot;
      url: &quot;qjatjr1108@gmail.com&quot;
    - label: &quot;Blog&quot;
      icon: &quot;fas fa-fw fa-link&quot;
      url: &quot;https://beomseok95.tistory.com/&quot;
    - label: &quot;GitHub&quot;
      icon: &quot;fab fa-fw fa-github&quot;
      url: &quot;https://github.com/beomjo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;저자-설정---footer&quot;&gt;저자 설정 - Footer&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site Footer
footer:
  links:
    - label: &quot;GitHub&quot;
      icon: &quot;fab fa-fw fa-github&quot;
      url: &quot;https://github.com/beomjo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;블로그-표시방법-설정&quot;&gt;블로그 표시방법 설정&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Outputting
permalink: /:categories/:title/
paginate: 5 # 첫 페이지에보여줄 최근 게시물 수를 지정
paginate_path: /page:num/
timezone: Asia/Seoul # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;포스트-쓰기&quot;&gt;포스트 쓰기&lt;/h2&gt;
&lt;p&gt;포스트는 특정 제목으로 작성되어야 한다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-{TITLE}.md&lt;/code&gt; 형식으로 파일명을 작성한다 . 
메타데이터를 위한 yaml 부분을 상단에작성하고, 본문을 위한 마크다운 부분을 그 아래에 작성한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: Jekyll, minimal-mistakes 테마를 적용하기
categories:
  - Blogs
tags:
  - Blog
  - Jekyll
  - minimal-mistakes
toc: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>beomjo</name></author><category term="Blogs" /><category term="Jekyll" /><category term="minimal-mistakes" /><summary type="html">설정 Github Pages 호스팅을 위해 ${GITHUB_ID}.github.io 라는 이름으로 리파지토리를 생성해야 한다 Gem을 이용해서 Jekyll 을 설치한다</summary></entry><entry><title type="html">BOJ 1912. 연속합</title><link href="/boj/boj-1912/" rel="alternate" type="text/html" title="BOJ 1912. 연속합" /><published>2021-03-13T00:00:00+09:00</published><updated>2021-03-13T00:00:00+09:00</updated><id>/boj/boj-1912</id><content type="html" xml:base="/boj/boj-1912/">&lt;h1 id=&quot;boj-1912-연속합&quot;&gt;&lt;strong&gt;BOJ 1912. 연속합&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134815073-dd8e1101-2e2c-46ec-a2e0-8b1cf7f8ed10.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;d[i] = n개의 정수로 이루어진 임의의 수열 에서 i로 끝나는 연속합(연속된 몇 개의 수를 선택해서 구할 수 있는 값 중 가장 큰 값)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;임의의 수열에서 i로 끝나는 경우는 2가지가 있다&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;1. i-1번째와 i번째가 연속하는 경우 -&amp;gt; d[i-1]+arr[i]&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;2.i-1번째와 i번째가 연속하지 않는 경우 -&amp;gt; arr[i]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134815110-17a49328-f46e-4ec7-8753-76e9047be1fe.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;점화식&lt;br /&gt;
d[i] = max(arr[i], arr[i] + d[i-1])&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.IOException;
import java.util.Scanner;

class Main {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        int[] d = new int[n];
        int[] arr = new int[n];

        for (int i = 0; i &amp;lt; n; i++) arr[i] = sc.nextInt();
        sc.close();

        d[0] = arr[0];

        for (int i = 1; i &amp;lt; n; i++) d[i] = Math.max(arr[i] + d[i - 1], arr[i]);

        int max = -1001;
        for (int i = 0; i &amp;lt; n; i++) {
            if (max &amp;lt; d[i]) {
                max = d[i];
            }
        }
        System.out.println(max);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import kotlin.math.max

fun main() {
    val n = readLine()!!.toInt()
    val arr = readLine()!!.split(&quot; &quot;).map { it.toInt() }
    val d = IntArray(n)

    d[0] = arr[0]
    for (i in 1 until n) d[i] = max(arr[i] + d[i - 1], arr[i])
    println(d.maxOf { it })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/commit/201d262b42354a89703765813faec885f4e7c603&quot;&gt;github.com/beomjo/algorithm-study/commit/201d262b42354a89703765813faec885f4e7c603&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 1912. 연속합</summary></entry><entry><title type="html">BOJ 14002. 가장 긴 증가하는 부분수열 4(LIS)</title><link href="/boj/boj-14002/" rel="alternate" type="text/html" title="BOJ 14002. 가장 긴 증가하는 부분수열 4(LIS)" /><published>2021-03-12T00:00:00+09:00</published><updated>2021-03-12T00:00:00+09:00</updated><id>/boj/boj-14002</id><content type="html" xml:base="/boj/boj-14002/">&lt;h1 id=&quot;boj-14002-가장-긴-증가하는-부분수열-4-lis&quot;&gt;&lt;strong&gt;BOJ 14002. 가장 긴 증가하는 부분수열 4 (LIS)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814980-322cb418-19a3-466d-a621-ef6de1de2052.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://beomseok95.tistory.com/355&quot;&gt;beomseok95.tistory.com/355&lt;/a&gt;&lt;/strong&gt;
위 문제와 같은 문제이지만 LIS의 길이뿐 아니라 모든 원소를 출력해야한다.&lt;br /&gt;
위 LIS 문제와 같이 푸는데, 역추적을 위한 배열을 만들어 LIS에 연결되는 인덱스를 저장한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134815034-1b8a3bbf-4592-4768-9b43-06eeeb17deda.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.IOException;
import java.util.Scanner;
import java.util.Stack;

class Main {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        StringBuilder answer = new StringBuilder();
        int n = sc.nextInt();
        int[] arr = new int[n];
        int[] d = new int[n]; // 길이를 담을 배열
        int[] v = new int[n]; // 경로를 추적할 인덱스를 담을 배열
        int max = -1;
        int index = -1;

        for (int i = 0; i &amp;lt; n; i++) {
            arr[i] = sc.nextInt();
            d[i] = 1;
            v[i] = -1;
            for (int j = 0; j &amp;lt; i; j++) {
                if (arr[i] &amp;gt; arr[j] &amp;amp;&amp;amp; d[i] &amp;lt; d[j] + 1) {
                    d[i] = d[j] + 1;
                    v[i] = j;
                }
            }

            if (max &amp;lt; d[i]) {
                max = d[i];
                index = i;
            }
        }
        answer.append(max).append(&quot;\n&quot;);

        Stack&amp;lt;Integer&amp;gt; stack = new Stack&amp;lt;Integer&amp;gt;();
        while (index != -1) {
            stack.push(arr[index]);
            index = v[index];
        }

        while (!stack.isEmpty()) {
            answer.append(stack.pop()).append(&quot; &quot;);
        }

        sc.close();
        System.out.println(answer);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.*

fun main() {
    val n = readLine()!!.toInt()
    val arr = readLine()!!.split(&quot; &quot;).map { it.toInt() }
    val d = IntArray(n) { 1 } // 길이를 담을 배열
    val v = IntArray(n) { -1 } // 경로를 추적할 인덱스를 담을 배열

    for (i in 0 until n) {
        for (j in 0 until i) {
            if (arr[i] &amp;gt; arr[j] &amp;amp;&amp;amp; d[i] &amp;lt; d[j] + 1) {
                d[i] = d[j] + 1
                v[i] = j
            }
        }
    }
    val maxLength = d.maxOf { it }
    var index = d.indexOf(maxLength)
    println(maxLength)

    val stack = Stack&amp;lt;Int&amp;gt;()
    while (index != -1) {
        stack.push(arr[index])
        index = v[index]
    }

    while (!stack.isEmpty()) {
        print(&quot;${stack.pop()} &quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/commit/2927f0207bb85c7dce70681a1aecef2d41903a2d&quot;&gt;github.com/beomjo/algorithm-study/commit/2927f0207bb85c7dce70681a1aecef2d41903a2d&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 14002. 가장 긴 증가하는 부분수열 4 (LIS)</summary></entry><entry><title type="html">BOJ 11053. 가장 긴 증가하는 부분수열 (LIS)</title><link href="/boj/boj-11053/" rel="alternate" type="text/html" title="BOJ 11053. 가장 긴 증가하는 부분수열 (LIS)" /><published>2021-03-05T00:00:00+09:00</published><updated>2021-03-05T00:00:00+09:00</updated><id>/boj/boj-11053</id><content type="html" xml:base="/boj/boj-11053/">&lt;h1 id=&quot;boj-11053-가장-긴-증가하는-부분수열-lis&quot;&gt;&lt;strong&gt;BOJ 11053. 가장 긴 증가하는 부분수열 (LIS)&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;가장 긴 증가하는 부분수열(Longest Increasing Subsequece) [&lt;a href=&quot;https://namu.wiki/w/%EC%B5%9C%EC%9E%A5%20%EC%A6%9D%EA%B0%80%20%EB%B6%80%EB%B6%84%20%EC%88%98%EC%97%B4&quot;&gt;나무위키]&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;어떤 임의의 수열이 주어질 때, 이 수열에서 몇 개의 수들을 제거해서 부분수열을 만들 수 있다.&lt;br /&gt;
이때 만들어진 부분수열 중 오름차순으로 정렬된 가장 긴 수열을 최장 증가 부분 수열이라 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814873-10c9a8ef-0209-4c24-b66d-e67683511aa4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;d[i] = a[1], …… a[i] 까지 수열이 있을 때, a[i]를 마지막으로 하는 가장 긴 증가하는 부분수열의 길이&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예를들어 a[1], a[2], a[3], a[4] …. a[i] 라는 수열이 있을 때 &lt;/p&gt;

&lt;p&gt;a[i]의 바로 전 수는 뭘까?&lt;br /&gt;
알 수없으므로 변수 j를 둔다.&lt;/p&gt;

&lt;p&gt;a[1], a[2], a[3], a[4] …. , a[j], a[i]&lt;br /&gt;
j 는 i보다 작고, a[j] &amp;lt; a[i]일때 LIS가 된다.&lt;/p&gt;

&lt;p&gt;점화식
d[i] = max(d[j]) + 1&lt;br /&gt;
j&amp;lt; 1 ,  a[i] &amp;gt; a[j]&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.IOException;
import java.util.Scanner;

class Main {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        int[] d = new int[n];
        int max = -1;

        for (int i = 0; i &amp;lt; n; i++) {
            arr[i] = sc.nextInt();
            d[i] = 1;
            for (int j = 0; j &amp;lt; i; j++) {
                if (arr[i] &amp;gt; arr[j]) {
                    d[i] = Math.max(d[i], d[j] + 1);
                }
            }

            if (max &amp;lt; d[i]) {
                max = d[i];
            }
        }
        sc.close();
        System.out.println(max);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import kotlin.math.max

fun main() {
    val n = readLine()!!.toInt()
    val arr = readLine()!!.split(&quot; &quot;).map { it.toInt() }
    val d = IntArray(n) { 1 }

    for (i in 0 until n) {
        for (j in 0 until i) {
            if (arr[i] &amp;gt; arr[j]) {
                d[i] = max(d[i], d[j] + 1)
            }
        }
    }

    println(d.maxOf { it })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/commit/0b4f0b0e945e335949409e9b9968b802733704bf&quot;&gt;github.com/beomjo/algorithm-study/commit/0b4f0b0e945e335949409e9b9968b802733704bf&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 11053. 가장 긴 증가하는 부분수열 (LIS) 가장 긴 증가하는 부분수열(Longest Increasing Subsequece) [나무위키] 어떤 임의의 수열이 주어질 때, 이 수열에서 몇 개의 수들을 제거해서 부분수열을 만들 수 있다. 이때 만들어진 부분수열 중 오름차순으로 정렬된 가장 긴 수열을 최장 증가 부분 수열이라 한다.</summary></entry><entry><title type="html">BOJ 2193. 이친수</title><link href="/boj/boj-2193/" rel="alternate" type="text/html" title="BOJ 2193. 이친수" /><published>2021-03-05T00:00:00+09:00</published><updated>2021-03-05T00:00:00+09:00</updated><id>/boj/boj-2193</id><content type="html" xml:base="/boj/boj-2193/">&lt;h1 id=&quot;boj2193이친수&quot;&gt;&lt;strong&gt;BOJ 2193.  이친수&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814808-0d28d75a-fbe5-4a95-8439-d4e5e41cf9fa.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;마지막으로 오는 수가 0 일 때 그 앞에 올 수 있는 수는 0,1이다.&lt;br /&gt;
마지막으로 오는 수가 1 일 때 그 앞에 올 수 있는 수는 0이다.&lt;/p&gt;

&lt;p&gt;점화식&lt;br /&gt;
d[i][0] = d[i-1][0] + d[i-1][1] &lt;br /&gt;
d[i][1] = d[i-1][0]&lt;/p&gt;

&lt;h3 id=&quot;bottom-up&quot;&gt;&lt;strong&gt;Bottom-Up&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.close();

        long[][] d = new long[n + 1][2];

        d[1][1] = 1;

        for (int i = 2; i &amp;lt;= n; i++) {
            for (int j = 0; j &amp;lt;= 1; j++) {
                if (j == 0) d[i][j] = d[i - 1][0] + d[i - 1][1];
                else d[i][j] = d[i - 1][0];
            }
        }
        System.out.println(d[n][0] + d[n][1]);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
   val n = readLine()!!.toInt()
   val d = Array(n + 1) { LongArray(2) }
   d[1][1] = 1

   for (i in 2..n) {
       for (j in 0..1) {
           d[i][j] = if (j == 0) d[i - 1][0] + d[i - 1][1] else d[i - 1][0]
       }
   }

   println(d[n][0] + d[n][1])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;top-down&quot;&gt;&lt;strong&gt;Top-Down&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    static long[][] d = new long[91][2];

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(go(n, 0) + go(n, 1));
    }

    static long go(int i, int j) {
        if (i == 1 &amp;amp;&amp;amp; j == 1) return 1;
        if (i == 1 &amp;amp;&amp;amp; j == 0) return 0;
        if (d[i][j] &amp;gt; 0) return d[i][j];

        if (j == 0) {
            d[i][j] = go(i - 1, 0) + go(i - 1, 1);
        } else {
            d[i][j] = go(i - 1, 0);
        }

        return d[i][j];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val d = Array(91) { LongArray(2) }

fun main() {
    val n = readLine()!!.toInt()
    println(go(n, 0) + go(n, 1))
}

fun go(i: Int, j: Int): Long {
    if (i == 1 &amp;amp;&amp;amp; j == 1) return 1
    if (i == 1 &amp;amp;&amp;amp; j == 0) return 0
    if (d[i][j] &amp;gt; 0) return d[i][j]

    d[i][j] = if (j == 0) go(i - 1, 0) + go(i - 1, 1) else go(i - 1, 0)

    return d[i][j]
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/commit/221467a4207833969f3527a5586429820482d6d9&quot;&gt;github.com/beomjo/algorithm-study/commit/221467a4207833969f3527a5586429820482d6d9&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 2193.  이친수</summary></entry><entry><title type="html">BOJ 10844. 쉬운 계단 수</title><link href="/boj/boj-10844/" rel="alternate" type="text/html" title="BOJ 10844. 쉬운 계단 수" /><published>2021-03-04T00:00:00+09:00</published><updated>2021-03-04T00:00:00+09:00</updated><id>/boj/boj-10844</id><content type="html" xml:base="/boj/boj-10844/">&lt;h1 id=&quot;boj10844쉬운계단수&quot;&gt;&lt;strong&gt;BOJ 10844. 쉬운 계단 수&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814761-6e21576b-d7d6-414a-9f6d-e32cece99e28.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;d[i][j] = 길이 i의 마지막숫자가 j인 수의 개수&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;길이 i의 마지막으로 오는수가 j일때 &lt;br /&gt;
마지막 수 j의 바로 전 수는 j+1 or j-1 일 수밖에 없다 (계단수는 인접한 모든 자릿수의 차이가 1이므로)&lt;br /&gt;
마지막 수 j로 끝났을 경우를 2차원 배열에 저장한다. &lt;br /&gt;
j가 0일때는 j+1만 올 수 있고, j가 9 일때는 j-1만 올 수 있음을 주의한다.&lt;/p&gt;

&lt;p&gt;점화식
d[i][j] = d[i-1][j-1] + d[i-1][j+1] , (1 &amp;lt; j &amp;lt;=9)&lt;/p&gt;

&lt;h3 id=&quot;bottom-up&quot;&gt;&lt;strong&gt;Bottom-Up&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        long[][] d = new long[n + 1][10];
        long mod = 1_000_000_000L;

        for (int i = 1; i &amp;lt;= 9; i++) d[1][i] = 1;
        for (int i = 2; i &amp;lt;= n; i++) {
            for (int j = 0; j &amp;lt;= 9; j++) {
                if (j == 0) {
                    d[i][j] = (d[i - 1][j + 1]) % mod;
                } else if (j == 9) {
                    d[i][j] = (d[i - 1][j - 1]) % mod;
                } else {
                    d[i][j] = (d[i - 1][j - 1] + d[i - 1][j + 1]) % mod;
                }
            }
        }

        long result = 0;
        for (int i = 0; i &amp;lt;= 9; i++) result += d[n][i];
        System.out.println(result % mod);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    val n = readLine()!!.toInt()
    val d = Array(n + 1) { LongArray(10) }
    val mod = 1_000_000_000L

    for (i in 1..9) d[1][i] = 1
    for (i in 2..n) {
        for (j in 0..9) {
            d[i][j] = when (j) {
                0 -&amp;gt; (d[i - 1][j + 1]) % mod
                9 -&amp;gt; (d[i - 1][j - 1]) % mod
                else -&amp;gt; (d[i - 1][j - 1] + d[i - 1][j + 1]) % mod
            }
        }
    }
    (0..9).sumOf { d[n][it] }.let { it % mod }.let(::println)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;top-down&quot;&gt;&lt;strong&gt;Top-Down&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    static long[][] d = new long[101][10];
    static long mod = 1_000_000_000L;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for (int j = 1; j &amp;lt;= 9; j++) d[1][j] = 1;

        long result = 0;
        for (int j = 0; j &amp;lt;= 9; j++) {
            result += (go(n, j) % mod);
        }

        System.out.println(result % mod);
    }

    static long go(int i, int j) {
        if (d[i][j] &amp;gt; 0 || i == 1) return d[i][j];

        if (j == 0) {
            d[i][j] = go(i - 1, j + 1) % mod;
        } else if (j == 9) {
            d[i][j] = go(i - 1, j - 1) % mod;
        } else {
            d[i][j] = (go(i - 1, j - 1) + go(i - 1, j + 1)) % mod;
        }

        return d[i][j] % mod;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val d = Array(101) { LongArray(10) }
const val mod = 1_000_000_000L

fun main() {
    val n = readLine()!!.toInt()
    for (i in 1..9) d[1][i] = 1

    ((0..9).sumOf { go(n, it) } % mod).let(::println)
}

fun go(i: Int, j: Int): Long {
    if (d[i][j] &amp;gt; 0 || i == 1) return d[i][j]

    d[i][j] = when (j) {
        0 -&amp;gt; go(i - 1, j + 1) % mod
        9 -&amp;gt; go(i - 1, j - 1) % mod
        else -&amp;gt; (go(i - 1, j + 1) + go(i - 1, j - 1)) % mod
    }

    return d[i][j] % mod
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/commit/7d1b464b3a06ce004cd071dc71af81c1ae751cd4#diff-1012b276a559252e4f3e8248e697ebbf45684020ae6683b2608c4a876d8b6fb8&quot;&gt;github.com/beomjo/algorithm-study/commit/7d1b464b3a06ce004cd071dc71af81c1ae751cd4#diff-1012b276a559252e4f3e8248e697ebbf45684020ae6683b2608c4a876d8b6fb8&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 10844. 쉬운 계단 수</summary></entry><entry><title type="html">BOJ 15990. 1, 2, 3 더하기 5</title><link href="/boj/boj-15990/" rel="alternate" type="text/html" title="BOJ 15990. 1, 2, 3 더하기 5" /><published>2021-03-01T00:00:00+09:00</published><updated>2021-03-01T00:00:00+09:00</updated><id>/boj/boj-15990</id><content type="html" xml:base="/boj/boj-15990/">&lt;h1 id=&quot;boj15990123더하기5&quot;&gt;&lt;strong&gt;BOJ 15990. 1, 2, 3 더하기 5&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814655-b3222955-ea2e-405a-9152-476c0cba4c7f.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;d[n] =  n을 1, 2, 3으로 나타내는 방법의 수 (두 번 이상 연속 X)&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;마지막으로 오는 수가 1이면? 그 앞에 올 수 있는 숫자는 2 또는 3이 된다.&lt;br /&gt;
마지막으로 오는 수가 2이면? 그 앞에 올 수 있는 숫자는 1 또는 3이 된다.&lt;br /&gt;
마지막으로 오는 수가 3이면? 그 앞에 올 수 있는 숫자는 1 또는 2이 된다.&lt;/p&gt;

&lt;p&gt;마지막이 1로 끝낫을경우, 2로 끝났을 경우, 3으로 끝났을 경우를 찾아서 2차원 배열에 저장해보자&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;d[i][j]&lt;/th&gt;
      &lt;th&gt;1로 끝났을경우&lt;/th&gt;
      &lt;th&gt;2로 끝났을 경우&lt;/th&gt;
      &lt;th&gt;3으로 끝낫을 경우&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;점화식&lt;br /&gt;
d[i][1] = d[i-1][2] + d[i-1][3]  //i 가 1로 끝났을 경우  &lt;br /&gt;
d[i][2] = d[i-2][1] + d[i-2][3] //i 가 2로 끝났을 경우  &lt;br /&gt;
d[i][3] = d[i-3][1] + d[i-2][2] //i 가 3으로 끝났을 경우&lt;/p&gt;

&lt;h3 id=&quot;bottom-up&quot;&gt;&lt;strong&gt;Bottom-Up&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        int maxValue = 100_001;
        long[][] d = new long[maxValue][4];
        long mod = 1_000_000_009L;

        d[1][1] = d[2][2] = d[3][3] = d[3][1] = d[3][2] = 1;

        for (int i = 4; i &amp;lt; maxValue; i++) {
            d[i][1] = (d[i - 1][2] + d[i - 1][3]) % mod;
            d[i][2] = (d[i - 2][1] + d[i - 2][3]) % mod;
            d[i][3] = (d[i - 3][1] + d[i - 3][2]) % mod;
        }

        while (t-- &amp;gt; 0) {
            int n = sc.nextInt();
            System.out.println((d[n][1] + d[n][2] + d[n][3]) % mod);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    val maxValue = 100_001
    val d = Array(maxValue) { LongArray(4) { 0 } }
    val mod = 1_000_000_009L

    d[1] = longArrayOf(0, 1, 0, 0)
    d[2] = longArrayOf(0, 0, 1, 0)
    d[3] = longArrayOf(0, 1, 1, 1)

    for (i in 4 until maxValue) {
        d[i][1] = (d[i - 1][2] + d[i - 1][3]) % mod
        d[i][2] = (d[i - 2][1] + d[i - 2][3]) % mod
        d[i][3] = (d[i - 3][1] + d[i - 3][2]) % mod
    }

    repeat(readLine()!!.toInt()) {
        val n = readLine()!!.toInt()
        println((d[n][1] + d[n][2] + d[n][3]) % mod)
    }
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;top-down&quot;&gt;&lt;strong&gt;Top-Down&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    static long[][] d = new long[100_001][4];
    static long mod = 1_000_000_009L;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        d[1][1] = d[2][2] = d[3][3] = d[3][1] = d[3][2] = 1;

        while (t-- &amp;gt; 0) {
            int i = sc.nextInt();
            System.out.println((go(i, 1) + go(i, 2) + go(i, 3)) % mod);
        }
        sc.close();
    }

    static long go(int i, int num) {
        if (i &amp;lt;= 3 || d[i][num] != 0) {
            return d[i][num];
        }

        d[i][1] = (go(i - 1, 2) + go(i - 1, 3)) % mod;
        d[i][2] = (go(i - 2, 1) + go(i - 2, 3)) % mod;
        d[i][3] = (go(i - 3, 1) + go(i - 3, 2)) % mod;

        return d[i][num] % mod;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val d = Array(100_001) { LongArray(4) { 0 } }
const val mod = 1_000_000_009L

fun main() {
    d[1] = longArrayOf(0, 1, 0, 0)
    d[2] = longArrayOf(0, 0, 1, 0)
    d[3] = longArrayOf(0, 1, 1, 1)


    repeat(readLine()!!.toInt()) {
        val i = readLine()!!.toInt()
        println((go(i, 1) + go(i, 2) + go(i, 3)) % mod)
    }
}

fun go(i: Int, num: Int): Long {
    if (i &amp;lt;= 3 || d[i][num] &amp;gt; 0) {
        return d[i][num]
    }

    d[i][2] = (go(i - 2, 1) + go(i - 2, 3)) % mod
    d[i][1] = (go(i - 1, 2) + go(i - 1, 3)) % mod
    d[i][3] = (go(i - 3, 1) + go(i - 3, 2)) % mod

    return d[i][num] % mod
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/15990.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/15990.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/15990.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/15990.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 15990. 1, 2, 3 더하기 5</summary></entry><entry><title type="html">BOJ 16194. 카드 구매하기 2</title><link href="/boj/boj-16194/" rel="alternate" type="text/html" title="BOJ 16194. 카드 구매하기 2" /><published>2021-02-23T00:00:00+09:00</published><updated>2021-02-23T00:00:00+09:00</updated><id>/boj/boj-16194</id><content type="html" xml:base="/boj/boj-16194/">&lt;h1 id=&quot;boj16194카드구매하기2&quot;&gt;&lt;strong&gt;BOJ 16194. 카드 구매하기 2&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814571-64f10588-ede5-4ec7-b7e2-39c5ed97c1f6.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814574-6339898e-bad7-419d-a4e9-cea444a2755f.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814578-55a62ac8-aad4-4ff6-9353-a64591177cba.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814580-1da17adc-89db-4c3e-ab1f-cb887815cf74.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;d[n] = 카드 N개를 갖기 위한 금액의 최솟값.&lt;/strong&gt;
카드 1개를 p[1]에 구매 -&amp;gt; 남은 카드의 수 i-1 -&amp;gt; p[1] + d[i-1]&lt;br /&gt;
카드 2개를 p[2]에 구매 -&amp;gt; 남은 카드의 수 i-2 -&amp;gt; p[2] + d[i-2]&lt;br /&gt;
카드 3개를 p[3]에 구매 -&amp;gt; 남은 카드의 수 i-3 -&amp;gt; p[3] + d[i-3]&lt;br /&gt;
..&lt;br /&gt;
..&lt;br /&gt;
카드 N개를 p[N]에 구매 -&amp;gt; 남은 카드의 수 i-N -&amp;gt; p[N] + d[i-N] &lt;/p&gt;

&lt;p&gt;이므로 범위는 1&amp;lt;= j = i 라는 범위가 성립한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;점화식&lt;br /&gt;
d[i] = min( d[i-1] + p[1] , d[i-2]+p[2] ……… )&lt;br /&gt;
d[i] = min(p[j] + d[i-j])  , ( 1 &amp;lt;= j &amp;lt;= i )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bottom-up&quot;&gt;&lt;strong&gt;Bottom-Up&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        int[] d = new int[n + 1];
        int[] p = new int[n + 1];

        for (int i = 1; i &amp;lt;= n; i++) {
            p[i] = sc.nextInt();
        }

        d[0] = 0;
        for (int i = 1; i &amp;lt;= n; i++) {
            d[i] = p[i];
            for (int j = 1; j &amp;lt;= i; j++) {
                d[i] = Math.min(d[i], d[i - j] + p[j]);
            }
        }

        System.out.println(d[n]);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.*

fun main() {
    val sc = Scanner(System.`in`)
    val n = sc.nextInt()

    val d = IntArray(n + 1) { 0 }
    val p = IntArray(n + 1) { 0 }

    for (i in 1..n) p[i] = sc.nextInt()

    for (i in 1..n) {
        d[i] = p[i]
        for (j in 1..i) {
            d[i] = kotlin.math.min(d[i], d[i - j] + p[j]);
        }
    }

    println(d[n])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;top-down&quot;&gt;&lt;strong&gt;Top-Down&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Arrays;
import java.util.Scanner;

class Main {
    static int[] d = new int[1001];
    static int[] p = new int[1001];
    static int maxValue = 1000 * 10000;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for (int i = 1; i &amp;lt;= n; i++) {
            p[i] = sc.nextInt();
        }
        Arrays.fill(d, maxValue);

        sc.close();
        System.out.println(go(n));
    }

    static int go(int i) {
        if (i == 0) return 0;
        if (d[i] != maxValue) return d[i];

        for (int j = 1; j &amp;lt;= i; j++) {
            d[i] = Math.min(d[i], go(i - j) + p[j]);
        }

        return d[i];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.*

val maxValue = 1000 * 10000
val d = IntArray(1001) { maxValue }
val p = IntArray(1001) { 0 }

fun main() {
    val sc = Scanner(System.`in`)
    val n = sc.nextInt()
    for (i in 1..n) p[i] = sc.nextInt()
    println(go(n))
}

fun go(i: Int): Int {
    if (i == 0) return 0
    if (d[i] != maxValue) return d[i]
    for (j in 1..i) d[i] = kotlin.math.min(d[i], go(i - j) + p[j])
    return d[i];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/2c55da78e6c32999db1d586ac95660b8774e4653/BOJ/java/16194.java&quot;&gt;github.com/beomjo/algorithm-study/blob/2c55da78e6c32999db1d586ac95660b8774e4653/BOJ/java/16194.java&lt;/a&gt;
[github.com/beomjo/algorithm-study/blob/2c55da78e6/BOJ/kotlin/16194.kt](https://github.com/beomjo/algorithm-study/blob/2c55da78e6/BOJ/kotlin/16194.kt&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 16194. 카드 구매하기 2</summary></entry><entry><title type="html">BOJ 11052. 카드 구매하기</title><link href="/boj/boj-11052/" rel="alternate" type="text/html" title="BOJ 11052. 카드 구매하기" /><published>2021-02-23T00:00:00+09:00</published><updated>2021-02-23T00:00:00+09:00</updated><id>/boj/boj-11052</id><content type="html" xml:base="/boj/boj-11052/">&lt;h1 id=&quot;boj11052카드구매하기&quot;&gt;&lt;strong&gt;BOJ 11052. 카드 구매하기&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814383-623c5380-f664-4f53-b951-87b88dbe84dd.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814440-ea126d10-202d-4fcb-893a-312b4785f89c.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814385-41498557-c2ba-4081-b022-941a8ee8885b.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814462-c4cc5ae4-7dd4-44f2-8bc1-5b3f00657ca4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;d[n] = N개의 카드를 갖기 위해 지불해야 하는 금액의 최댓값.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;카드 1개를 p[1]에 구매 -&amp;gt; 남은 카드의 수 i-1 -&amp;gt; p[1] + d[i-1]&lt;br /&gt;
카드 2개를 p[2]에 구매 -&amp;gt; 남은 카드의 수 i-2 -&amp;gt; p[2] + d[i-2]&lt;br /&gt;
카드 3개를 p[3]에 구매 -&amp;gt; 남은 카드의 수 i-3 -&amp;gt; p[3] + d[i-3]&lt;br /&gt;
..&lt;br /&gt;
..&lt;br /&gt;
카드 N개를 p[N]에 구매 -&amp;gt; 남은 카드의 수 i-N -&amp;gt; p[N] + d[i-N] &lt;/p&gt;

&lt;p&gt;이므로 범위는 1&amp;lt;= j = i 라는 범위가 성립한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;점화식&lt;br /&gt;
d[i] = max( d[i-1] + p[1] , d[i-2]+p[2] ……… )&lt;br /&gt;
d[i] = max(p[j] + d[i-j])  , ( 1 &amp;lt;= j &amp;lt;= i )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bottom-up&quot;&gt;&lt;strong&gt;Bottom-Up&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        int[] d = new int[n + 1];
        int[] p = new int[n + 1];

        for (int i = 1; i &amp;lt;= n; i++) {
            p[i] = sc.nextInt();
        }

        for (int i = 1; i &amp;lt;= n; i++) {
            for (int j = 1; j &amp;lt;= i; j++) {
                d[i] = Math.max(d[i], d[i - j] + p[j]);
            }
        }
        System.out.println(d[n]);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    val n = readLine()!!.toInt()
    val d = IntArray(n + 1) { 0 }
    val p = &quot;0 ${readLine()!!}&quot;.split(&quot; &quot;).map { it.toInt() }
    for (i in 1..n)
        for (j in 1..i) d[i] = max(d[i], d[i - j] + p[j])
    println(d[n])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;top-down&quot;&gt;&lt;strong&gt;Top-Down&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    static int[] d = new int[1001];
    static int[] p = new int[1001];

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for (int i = 1; i &amp;lt;= n; i++) {
            p[i] = sc.nextInt();
        }

        System.out.println(go(n));
    }

    static int go(int i) {
        if (i == 0) return 0;
        if (d[i] &amp;gt; 0) return d[i];

        for (int j = 1; j &amp;lt;= i; j++) {
            d[i] = Math.max(d[i], go(i - j) + p[j]);
        }
        return d[i];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.Math.max
import java.util.*

val d = IntArray(1001) { 0 }
val p = IntArray(1001) { 0 }

fun main() {
    val sc = Scanner(System.`in`)
    val n = sc.nextInt()
    for (i in 1..n) p[i] = sc.nextInt()
    println(go(n))
}

fun go(i: Int): Int {
    if (i == 0) return 0
    if (d[i] &amp;gt; 0) return d[i]
    for (j in 1..i) d[i] = max(d[i], go(i - j) + p[j])
    return d[i];
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;시간 복잡도&lt;/strong&gt;
1 장부터 n장까지 반복 = O(n)&lt;br /&gt;
각 i장의 최댓값 반복 = O(n)&lt;/p&gt;

&lt;p&gt;O(n) + O(n) = O(n^2) &lt;/p&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/48b8a2e9c77282ea27e84f102da90fda3299258a/BOJ/java/11052.java&quot;&gt;github.com/beomjo/algorithm-study/blob/48b8a2e9c77282ea27e84f102da90fda3299258a/BOJ/java/11052.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/48b8a2e9c7/BOJ/kotlin/11052.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/48b8a2e9c7/BOJ/kotlin/11052.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 11052. 카드 구매하기</summary></entry><entry><title type="html">BOJ 11726. 2xn 타일링</title><link href="/boj/boj-11726/" rel="alternate" type="text/html" title="BOJ 11726. 2xn 타일링" /><published>2021-02-22T00:00:00+09:00</published><updated>2021-02-22T00:00:00+09:00</updated><id>/boj/boj-11726</id><content type="html" xml:base="/boj/boj-11726/">&lt;h1 id=&quot;boj117262xn타일링&quot;&gt;&lt;strong&gt;BOJ 11726. 2xn 타일링&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814181-3a4161b1-1fbe-48e2-9ea7-adcf5c7840f5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;d[n] = 2*n 크기의 직사각형을 채우는 방법의 수&lt;/strong&gt;
앞부분들은 겹치는 부분들로 memo 해놓고 계속 사용하게 되니&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814182-8c33bcc0-6a9d-47ca-8baa-0aa88cede0ed.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;점화식&lt;br /&gt;
d[n] = d[n-1] + d[n-2]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;또한 d가 1일 때 방법은 1개이므로, d[1] = 1&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814184-10fb8bfc-1435-4469-8d86-3845be02cb7d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;d가 2일 때 방법은 1개이므로, d[2] = 2&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814186-c7be4365-85f2-4006-909e-9989e91901a9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bottom-up&quot;&gt;&lt;strong&gt;Bottom-Up&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] d = new int[n + 1];
        d[1] = 1;
        d[2] = 2;
        for (int i = 3; i &amp;lt;= n; i++) {
            d[i] = (d[i - 1] + d[i - 2]) % 10007;
        }
        System.out.println(d[n]);
        sc.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    val n = readLine()!!.toInt()
    val d = IntArray(n + 1) { 0 }
    d[1] = 1
    d[2] = 2
    for (i in 3..n) d[i] = (d[i - 1] + d[i - 2]) % 10007
    println(d[n])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;top-down&quot;&gt;&lt;strong&gt;Top-Down&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    static int[] d = new int[1001];

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println(go(sc.nextInt()));
    }

    static int go(int i) {
        if (i == 1) return 1;
        if (i == 2) return 2;
        if (d[i] &amp;gt; 0) return d[i];
        d[i] = (go(i - 1) + go(i - 2)) % 10007;
        return d[i];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val d = IntArray(1001) { 0 }

fun main() {
    println(go(readLine()!!.toInt()))
}

fun go(i: Int): Int {
    if (i == 1) return 1
    if (i == 2) return 2
    if (d[i] &amp;gt; 0) return d[i]
    d[i] = (go(i - 1) + go(i - 2)) % 10007
    return d[i]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/11726.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/11726.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/11726.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/11726.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 11726. 2xn 타일링</summary></entry></feed>