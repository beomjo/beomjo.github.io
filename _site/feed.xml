<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-09-27T00:15:46+09:00</updated><id>/feed.xml</id><title type="html">Beom Log</title><subtitle>beomjo amazing website.</subtitle><author><name>beomjo</name></author><entry><title type="html">Jekyll, minimal-mistakes 테마를 적용하기</title><link href="/blogs/create-blog/" rel="alternate" type="text/html" title="Jekyll, minimal-mistakes 테마를 적용하기" /><published>2021-06-29T00:00:00+09:00</published><updated>2021-06-29T00:00:00+09:00</updated><id>/blogs/create-blog</id><content type="html" xml:base="/blogs/create-blog/">&lt;h2 id=&quot;설정&quot;&gt;설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Github Pages 호스팅을 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${GITHUB_ID}.github.io&lt;/code&gt; 라는 이름으로 리파지토리를 생성해야 한다&lt;/li&gt;
  &lt;li&gt;Gem을 이용해서 Jekyll 을 설치한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테마-적용&quot;&gt;테마 적용&lt;/h2&gt;
&lt;p&gt;minimal-mistake &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/&quot;&gt;빠른 시작 가이드&lt;/a&gt;를 참고하여 진행한다.&lt;br /&gt;
&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot;&gt;minimal-mistake&lt;/a&gt; Repository에서 소스를 가져와 옮긴다.&lt;br /&gt;
옮긴 후 다음 과정을 진행한다.&lt;/p&gt;

&lt;h3 id=&quot;불필요-내용-제거&quot;&gt;불필요 내용 제거&lt;/h3&gt;
&lt;p&gt;minimal-mistakes-jekyll repository에서 소스를 가져왔다면 불필요한 내용을 제거한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;.editorconfig&lt;/li&gt;
  &lt;li&gt;.gitattributes&lt;/li&gt;
  &lt;li&gt;.github&lt;/li&gt;
  &lt;li&gt;/docs&lt;/li&gt;
  &lt;li&gt;/test&lt;/li&gt;
  &lt;li&gt;CHANGELOG.md&lt;/li&gt;
  &lt;li&gt;minimal-mistakes-jekyll.gemspec&lt;/li&gt;
  &lt;li&gt;README.md&lt;/li&gt;
  &lt;li&gt;screenshot-layouts.png&lt;/li&gt;
  &lt;li&gt;screenshot.png&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;_config-파일-설정&quot;&gt;_config 파일 설정&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yaml&lt;/code&gt; 파일에서 아래와 값들을 설정해준다&lt;/p&gt;

&lt;h4 id=&quot;기본-구성&quot;&gt;기본 구성&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site Settings
minimal_mistakes_skin    : &quot;dark&quot;
title                    : &quot;Beom Log&quot;
name                     : &quot;취미코딩하는 개발자&quot;
description              : &quot;회사에서는 월급 받고 집에서는 취미로 코딩하는 개발자의 블로그&quot;
url                      : &quot;https://beomjo.github.io&quot;
baseurl                  : # 서브 경로가 있는 경우 기재
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;teaser와-logo-그림-파일&quot;&gt;teaser와 logo 그림 파일&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;teaser                   : &quot;/assets/images/bio.jpg&quot;
logo                     : # 최상단 메뉴 바에 사이트 로고 넣기
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;댓글&quot;&gt;댓글&lt;/h4&gt;
&lt;p&gt;블로그 댓글 기능 disqus, discourse, facebook, staticman, utterances 정도가 대표적이다. &lt;br /&gt;
GitHub Pages 자체적으로 댓글을 제공하고 있지 않기때문에 보통 외부 댓글 서비스를 연결해주는 방식을 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;comments:
  provider               : # 블로그 댓글 기능 false (default), &quot;disqus&quot;, &quot;discourse&quot;, &quot;facebook&quot;, &quot;staticman&quot;, &quot;staticman_v2&quot;, &quot;utterances&quot;, &quot;custom&quot;
  disqus:
    shortname            : # 블로그 댓글 기능 https://help.disqus.com/customer/portal/articles/466208-what-s-a-shortname-
  discourse:
    server               : # https://meta.discourse.org/t/embedding-discourse-comments-via-javascript/31963 , e.g.: meta.discourse.org
  facebook:
    # https://developers.facebook.com/docs/plugins/comments
    appid                :
    num_posts            : # 5 (default)
    colorscheme          : # &quot;light&quot; (default), &quot;dark&quot;
  utterances:
    theme                : # &quot;github-light&quot; (default), &quot;github-dark&quot;
    issue_term           : # &quot;pathname&quot; (default)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;저자-설정&quot;&gt;저자 설정&lt;/h4&gt;
&lt;p&gt;minimal-mistakes theme은 사이트 좌측 사이드바에 기본으로 사이트 저자 소개를 설정한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site Author
author:
  name             : &quot;beomjo&quot;
  avatar           : &quot;/assets/images/bio-photo.jpg&quot;
  bio              : &quot;beomjo dev log 🧑‍💻&quot;
  location         : &quot;South Korea&quot;
  email            :
  links:
    - label: &quot;Email&quot;
      icon: &quot;fas fa-fw fa-envelope-square&quot;
      url: &quot;qjatjr1108@gmail.com&quot;
    - label: &quot;Blog&quot;
      icon: &quot;fas fa-fw fa-link&quot;
      url: &quot;https://beomseok95.tistory.com/&quot;
    - label: &quot;GitHub&quot;
      icon: &quot;fab fa-fw fa-github&quot;
      url: &quot;https://github.com/beomjo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;저자-설정---footer&quot;&gt;저자 설정 - Footer&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site Footer
footer:
  links:
    - label: &quot;GitHub&quot;
      icon: &quot;fab fa-fw fa-github&quot;
      url: &quot;https://github.com/beomjo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;블로그-표시방법-설정&quot;&gt;블로그 표시방법 설정&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Outputting
permalink: /:categories/:title/
paginate: 5 # 첫 페이지에보여줄 최근 게시물 수를 지정
paginate_path: /page:num/
timezone: Asia/Seoul # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;포스트-쓰기&quot;&gt;포스트 쓰기&lt;/h2&gt;
&lt;p&gt;포스트는 특정 제목으로 작성되어야 한다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-{TITLE}.md&lt;/code&gt; 형식으로 파일명을 작성한다 . 
메타데이터를 위한 yaml 부분을 상단에작성하고, 본문을 위한 마크다운 부분을 그 아래에 작성한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: Jekyll, minimal-mistakes 테마를 적용하기
categories:
  - Blogs
tags:
  - Blog
  - Jekyll
  - minimal-mistakes
toc: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>beomjo</name></author><category term="Blogs" /><category term="Jekyll" /><category term="minimal-mistakes" /><summary type="html">설정 Github Pages 호스팅을 위해 ${GITHUB_ID}.github.io 라는 이름으로 리파지토리를 생성해야 한다 Gem을 이용해서 Jekyll 을 설치한다</summary></entry><entry><title type="html">BOJ 9613. GCD 합</title><link href="/boj/boj-9613/" rel="alternate" type="text/html" title="BOJ 9613. GCD 합" /><published>2021-02-16T00:00:00+09:00</published><updated>2021-02-16T00:00:00+09:00</updated><id>/boj/boj-9613</id><content type="html" xml:base="/boj/boj-9613/">&lt;h1 id=&quot;boj9613gcd합&quot;&gt;&lt;strong&gt;BOJ 9613. GCD 합&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813532-dcef875e-31d4-49e9-a6a1-dda14dbd2ab0.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;첫 줄에는 테스트 케이스 개수 t(1&amp;lt;=t&amp;lt;100)이 주어지고  
그다음 줄부터 테스트 케이스를 입력받는다.&lt;br /&gt;
첫 줄에 테스트를 할 수의 개수 n (1&amp;lt;n&amp;lt;=100)이 주어지고, 그다음 n개의 수가 주어진다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4 10 20 30 40&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;10과 20의 최대공약수, 20과 30의 최대공약수, 30과 40의 최대공약수를 각각 구하여 모두 더한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- &amp;gt; 0) {
            int tc = sc.nextInt();
            int[] arr = new int[tc];
            long sum = 0;

            for (int i = 0; i &amp;lt; tc; i++) {
                arr[i] = sc.nextInt();
            }

            for (int i = 0; i &amp;lt; tc; i++) {
                for (int j = i + 1; j &amp;lt; tc; j++) {
                    sum += getGCD(arr[i], arr[j]);
                }
            }
            System.out.println(sum);
        }
        sc.close();
    }

    static int getGCD(int a, int b) {
        while (b != 0) {
            int r = a % b;
            a = b;
            b = r;
        }
        return a;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    repeat(readLine()!!.toInt()) {
        val arr = readLine()!!.split(&quot; &quot;).map { it.toLong() }
        val sum = (1 until arr.size).map { i -&amp;gt;
            (1 until i).map { j -&amp;gt;
                getGCD(arr[i], arr[j])
            }.sum()
        }.sum()
        println(sum)
    }

}

fun getGCD(a: Long, b: Long): Long = if (b == 0L) a else getGCD(b, a % b)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/9613.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/9613.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/9613.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/9613.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 9613. GCD 합</summary></entry><entry><title type="html">BOJ 17087. 숨바꼭질 6</title><link href="/boj/boj-17087/" rel="alternate" type="text/html" title="BOJ 17087. 숨바꼭질 6" /><published>2021-02-16T00:00:00+09:00</published><updated>2021-02-16T00:00:00+09:00</updated><id>/boj/boj-17087</id><content type="html" xml:base="/boj/boj-17087/">&lt;h2 id=&quot;boj17087숨바꼭질6&quot;&gt;&lt;strong&gt;BOJ 17087. 숨바꼭질 6&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813665-ea78c50e-0d04-4a56-adee-9cce242c164b.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813668-0e937230-70cd-4cd4-a317-c0bc89ab713e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;첫 줄에  N(동생의 수), S(현재 위치)가 주어지고&lt;br /&gt;
둘째 줄에 동생들의 위치가 주어진다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3 3 // 동생의수 3, 현재위치 3
1 7 11 // 동생들의 위치
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현재 위치 3에서 동생들의 위치 (1, 7, 11)까지의 각각 거리를 계산하여 배열에 저장한다.&lt;br /&gt;
배열에 저장된 현재 위치와의 거리 차이들의 최대 공약수가 이동할 수 있는 최대 거리 D가 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int s = sc.nextInt();
        int[] distances = new int[n];
        for (int i = 0; i &amp;lt; n; i++) {
            int b = sc.nextInt();
            distances[i] = Math.abs(s - b);
        }
        int result = distances[0];
        for (int i = 1; i &amp;lt; n; i++) {
            result = getGCD(result, distances[i]);
        }
        System.out.println(result);
        sc.close();
    }
    
    static int getGCD(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return getGCD(b, a % b);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import kotlin.math.abs

fun main() {
    val (n, s) = readLine()!!.split(&quot; &quot;)
    val distances = readLine()!!.split(&quot; &quot;)
        .map { it.toInt() }
        .map { s.toInt() - it }
        .map { abs(it) }
    var result = distances[0]
    (1 until n.toInt()).forEach {
        result = getGCD(result, distances[it])
    }
    println(result)
}

fun getGCD(a: Int, b: Int): Int = if (b == 0) a else getGCD(b, a % b)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/17087.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/17087.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/17087.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/17087.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 17087. 숨바꼭질 6</summary></entry><entry><title type="html">BOJ 1929. 소수구하기</title><link href="/boj/boj-1929/" rel="alternate" type="text/html" title="BOJ 1929. 소수구하기" /><published>2021-02-09T00:00:00+09:00</published><updated>2021-02-09T00:00:00+09:00</updated><id>/boj/boj-1929</id><content type="html" xml:base="/boj/boj-1929/">&lt;h1 id=&quot;boj1929소수구하기&quot;&gt;&lt;strong&gt;BOJ 1929. 소수 구하기&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813162-252e758f-b2dd-4982-b0b1-ab281e52bca8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;입력이 1 &amp;lt;= M &amp;lt;= N &amp;lt;= 1,000,000 이므로 
&lt;a href=&quot;http://beomseok95.tistory.com/339&quot;&gt;소수 찾기&lt;/a&gt;  방식을 사용하면 시간 초과가 발생한다
시간 복잡도를 잘 계산하지 않으면 시간 초과가 발생하는것이다.&lt;/p&gt;

&lt;p&gt;시간 복잡도를 줄이기 위해 &lt;strong&gt;에라토스테네스의 체&lt;/strong&gt; [&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4&quot;&gt;wiki&lt;/a&gt;] 알고리즘을 사용한다
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813237-cc23fdeb-dc38-4908-b011-457eba99e4a6.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1~120까지 수가 있을 때  
1을 제외한 지워지지 않은 가장 작은 소수는 2이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2의 배수를 모두 제거&lt;/li&gt;
  &lt;li&gt;3의 배수를 모두 제거&lt;/li&gt;
  &lt;li&gt;5의 배수를 모두 제거
…
…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        boolean[] check = new boolean[1000001];
        StringBuilder sb = new StringBuilder();

        int min = sc.nextInt();
        int max = sc.nextInt();

        check[1] = true;

        for (int i = 2; i &amp;lt;= max; i++) {
            for (int j = 2; i * j &amp;lt;= max; j++) {
                if (!check[i * j]) {
                    check[i * j] = true;
                }
            }
        }

        for (int i = min; i &amp;lt;= max; i++) {
            if (!check[i]) {
                sb.append(i).append(&quot;\n&quot;);
            }
        }

        System.out.println(sb);
        sc.close();
    }
}



&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    val (m, n) = readLine()!!.split(' ').map { it.toInt() }
    val check = BooleanArray(n + 1) { false }
    for (i in 2..n) {
        if (!check[i]) {
            if (i &amp;gt; m) println(i)
            var j = 2
            while (i * j &amp;lt;= n) {
                check[i * j] = true
                j++
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/1929.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/1929.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/1929.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/1929.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 1929. 소수 구하기</summary></entry><entry><title type="html">BOJ 1978. 소수 찾기</title><link href="/boj/boj-1978/" rel="alternate" type="text/html" title="BOJ 1978. 소수 찾기" /><published>2021-02-09T00:00:00+09:00</published><updated>2021-02-09T00:00:00+09:00</updated><id>/boj/boj-1978</id><content type="html" xml:base="/boj/boj-1978/">&lt;h1 id=&quot;boj1978소수찾기&quot;&gt;&lt;strong&gt;BOJ 1978. 소수 찾기&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812967-94902a79-cb8d-493c-80ff-b2d687948cbe.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;소수&lt;/strong&gt;란 1과 자기 자신밖에 존재하지 않는 수&lt;/p&gt;

&lt;h3 id=&quot;소수-구하기-1&quot;&gt;&lt;strong&gt;소수 구하기 1&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boolean isPrime(int n) {
    if (n &amp;lt; 2) {
        return false;
    }

    for (int i = 2; i &amp;lt;= n-1; i++) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; N이 소수가 되려면 2보다 크거나 같고, N-1보다 작거나 같은 수로 나누어 떨어지면 안 된다.
O(N)의 시간 복잡도를 가진다&lt;/p&gt;

&lt;h3 id=&quot;소수-구하기-2&quot;&gt;&lt;strong&gt;소수 구하기 2&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boolean isPrime(int n) {
    if (n &amp;lt; 2) {
        return false;
    }

    for (int i = 2; i &amp;lt;= n / 2; i++) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;N이 소수가 되려면 2보다 크거나 같고, N/2보다 작거나 같은 자연수로 나누어 떨어지면 안 된다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N = a \* b (a≤b)&lt;/code&gt; 일 때 &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a가 작을수록 b는 크다&lt;/li&gt;
  &lt;li&gt;가능한 a 중에서 가장 작은 값은 2이기 때문에, &lt;strong&gt;b는 b N/2를 넘지 않는다&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;a가 2라 하였을 때  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N = 2 * (N/2)&lt;/code&gt;이므로&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(N/2)==O(N)&lt;/code&gt;의 시간 복잡도를 가진다&lt;/p&gt;

&lt;h3 id=&quot;소수-구하기-3&quot;&gt;&lt;strong&gt;소수 구하기 3&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boolean isPrime(int n) {
    if (n &amp;lt; 2) {
        return false;
    }

    for (int i = 2; i * i &amp;lt;= n; i++) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;N이 소수가 되려면 2보다 크거나 같고, 루트 N보다 작거나 같은 수로 나누어 떨어지면 안 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;N이 소수가 아니라면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N = a \* b (a≤b)&lt;/code&gt;로 나타낼 수 있다&lt;/li&gt;
  &lt;li&gt;a와 b의 차이가 가장 작은 경우는 루트 N이다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812970-babee32b-5ed9-4cd4-b727-1a96b01ff71e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(√N)&lt;/code&gt;의 시간 복잡도를 가진다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int count = 0;
        while (t-- &amp;gt; 0) {
            int n = sc.nextInt();
            if (isPrime(n)) count++;
        }
        System.out.println(count);
        sc.close();
    }

    static boolean isPrime(int n) {
        if (n &amp;lt; 2) {
            return false;
        }

        for (int i = 2; i * i &amp;lt;= n; i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    readLine()
    println(readLine()!!.split(' ').map(String::toInt).filter(::isPrime).size)
}

private fun isPrime(n: Int) = n != 1 &amp;amp;&amp;amp; !(2 until n).any { n % it == 0 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;소스풀이&quot;&gt;소스풀이&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/1978.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/1978.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/1978.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/1978.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 1978. 소수 찾기</summary></entry><entry><title type="html">BOJ 2609. 최대공약수와 최소공배수</title><link href="/boj/boj-2609/" rel="alternate" type="text/html" title="BOJ 2609. 최대공약수와 최소공배수" /><published>2021-02-09T00:00:00+09:00</published><updated>2021-02-09T00:00:00+09:00</updated><id>/boj/boj-2609</id><content type="html" xml:base="/boj/boj-2609/">&lt;h1 id=&quot;boj2609최대공약수와최소공배수&quot;&gt;&lt;strong&gt;BOJ 2609. 최대공약수와 최소공배수&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812720-fd59b3e8-a904-454a-943e-025d9f47c0a7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;최대-공약수를-구하는-방법-1&quot;&gt;&lt;strong&gt;최대 공약수를 구하는 방법 1&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int getGCP(int a, int b) {
    int r = 1;
    for (int i = 2; i &amp;lt; Math.min(a, b); i++) {
        if (a % i == 0 &amp;amp;&amp;amp; b % i == 0) {
            r = i;
        }
    }
    return r;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2부터 a와 b 중 작은 값 까지&lt;br /&gt;
a와 b 모두 나머지가 0인 수를 찾기&lt;/p&gt;

&lt;h3 id=&quot;최대-공약수를-구하는-방법-2&quot;&gt;&lt;strong&gt;최대 공약수를 구하는 방법 2&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;유클리드 호제법을 재귀 함수를 통해 구현&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int getGCP(int a, int b) {
    if (b == 0) {
        return a;
    } else {
        return getGCP(b, a % b);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812726-7e96a369-46db-4579-8403-0375e61289a7.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812727-f5b99a71-a5d3-4fd3-b8d5-9633f2b38c3e.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812730-c9a7ad37-de96-48ae-a2d1-09509cd658f3.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;최대-공약수를-구하는-방법-3&quot;&gt;&lt;strong&gt;최대 공약수를 구하는 방법 3&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;유클리드 호제법 while문 사용하여 구현&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  int getGCP(int a, int b) {
        while (b != 0) {
            int r = a % b;
            a = b;
            b = r;
        }
        return a;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;
import java.util.Scanner;

class Main {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();

        int gcp = getGCP(a, b);
        int lcm = getLCM(a, b, gcp);

        System.out.println(gcp);
        System.out.println(lcm);
        sc.close();
    }

    static int getGCP(int a, int b) {
        int r = 1;
        for (int i = 2; i &amp;lt; Math.min(a, b); i++) {
            if (a % i == 0 &amp;amp;&amp;amp; b % i == 0) {
                r = i;
            }
        }
        return r;
    }

    static int getLCM(int a, int b, int gcp) {
        return a * b / gcp;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;kotlin&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.*

fun getGCP(a: Int, b: Int): Int = if (b == 0) a else getGCP(b, a % b)
fun getLCM(a: Int, b: Int): Int = a * b / getGCP(a, b)

fun main() {
    val sc = Scanner(System.`in`)
    val a = sc.nextInt()
    val b = sc.nextInt()

    val gcp = getGCP(a, b)
    val lcm = getLCM(a, b)

    println(gcp)
    println(lcm)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;소스풀이&quot;&gt;소스풀이&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/2609.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/2609.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/2609.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/2609.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 2609. 최대공약수와 최소공배수</summary></entry><entry><title type="html">BOJ 6588. 골드바흐의 추측</title><link href="/boj/boj-6588/" rel="alternate" type="text/html" title="BOJ 6588. 골드바흐의 추측" /><published>2021-02-09T00:00:00+09:00</published><updated>2021-02-09T00:00:00+09:00</updated><id>/boj/boj-6588</id><content type="html" xml:base="/boj/boj-6588/">&lt;h2 id=&quot;boj6588골드바흐의추측&quot;&gt;&lt;strong&gt;BOJ 6588. 골드바흐의 추측&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813311-5632c92b-3088-4ea6-8b5c-a09157258b86.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;골드바흐의 추측&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;4보다 큰 모든 짝수는 두 홀수 소수의 합으로 나타낼 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;먼저 소수를 찾아야 하므로&lt;br /&gt;
&lt;strong&gt;에라 토스트 테네스의 체&lt;/strong&gt; 알고리즘을 활용하여 범위 내의 모든 소수를 찾는다.&lt;br /&gt;
그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!check[a] &amp;amp;&amp;amp; !check[b]&lt;/code&gt; 조건을 만족하는 a와 b를 찾는다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        StringBuilder sb = new StringBuilder();

        int end = 1000000;

        boolean[] check = new boolean[end + 1];
        check[1] = true;

        for (int i = 2; i &amp;lt;= end; i++) {
            for (int j = 2; i * j &amp;lt;= end; j++) {
                if (!check[i * j]) {
                    check[i * j] = true;
                }
            }
        }

        while (true) {
            int n = sc.nextInt();
            if (n == 0)
                break;
            for (int i = 2; i * 2 &amp;lt;= n; i++) {
                int a = i;
                int b = n - a;
                if (!check[a] &amp;amp;&amp;amp; !check[b]) {
                    sb.append(n + &quot; = &quot; + a + &quot; + &quot; + b + &quot;\n&quot;);
                    break;
                }
            }
        }
        System.out.println(sb);
        sc.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.StringBuilder

fun main() {
    val sb = StringBuilder()
    val end = 1000001
    val check = BooleanArray(end + 1) { false }
    for (i in 2..end) {
        if (!check[i]) {
            var j = 2
            while (i * j &amp;lt;= end) {
                check[i * j] = true
                j++
            }
        }
    }

    while (true) {
        val n = readLine()!!.toInt()
        if (n == 0) break
        for (i in 2..n / 2) {
            val a = i
            val b = n - a
            if (!check[a] &amp;amp;&amp;amp; !check[b]) {
                sb.append(&quot;$n = $a + $b\n&quot;)
                break
            }
        }
    }
    println(sb)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/6588.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/6588.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/6588.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/6588.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 6588. 골드바흐의 추측</summary></entry><entry><title type="html">BOJ 17289. 오큰수</title><link href="/boj/boj-17289/" rel="alternate" type="text/html" title="BOJ 17289. 오큰수" /><published>2021-02-09T00:00:00+09:00</published><updated>2021-02-09T00:00:00+09:00</updated><id>/boj/boj-17289</id><content type="html" xml:base="/boj/boj-17289/">&lt;h1 id=&quot;boj17298오큰수&quot;&gt;&lt;strong&gt;BOJ 17298. 오큰수&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812387-43552558-a687-4f46-b552-556fe944b3b0.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;오큰수&lt;/strong&gt;란 입력된 숫자의 오른쪽에 있는 수들 중 가장 큰 수를 의미한다.  
입력이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3 5 2 7&lt;/code&gt; 일 때&lt;br /&gt;
입력 개수가 4개이므로 0부터 3까지 루프를 돌아준다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;i == 0&lt;/strong&gt; 일 때 &lt;br /&gt;
stack은 비어있으므로 stack.push&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812389-1c5d4a8c-cc13-4584-bc72-f059acea1358.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;i == 1&lt;/strong&gt; 일때
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack.isNotEmpty &amp;amp;&amp;amp; number(5) &amp;gt; stack.peek().element(3)&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; 이므로 &lt;br /&gt;
while문을 돌아 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;answer[0]&lt;/code&gt;에 5를 넣는다.&lt;/p&gt;

&lt;p&gt;그리고 stack에도 element:5, position 1을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push()&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812391-9c19348c-2020-466f-8508-f3c5175e48e9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;i == 2&lt;/strong&gt; 일 때 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack.isNotEmpty &amp;amp;&amp;amp; number(2) &amp;gt; stack.peek().element(5)&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; 이므로 
while문을 돌지 않고 stack에 element:2 , position 2를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push()&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812394-e2adeec1-2490-45cf-bcff-bae58f3118d9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;i == 3&lt;/strong&gt;  일 때  
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack.isNotEmpty &amp;amp;&amp;amp; number(7) &amp;gt; stack.peek().element(2)&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; 이므로 &lt;br /&gt;
while문을 돌아 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;answer[2]&lt;/code&gt;에 7을 넣는다.
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812396-9a72d59f-e2e5-406f-acf5-17d47721414c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다시 while문을 돌아 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack.isNotEmpty &amp;amp;&amp;amp;  number(7) &amp;gt; stack.peek().element(5)&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; 이므로 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;answer[1]&lt;/code&gt;에 7을 넣는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812405-b8569c39-b510-4247-bb06-24e779a37b91.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;for 루프를 모두 돌았으므로 &lt;br /&gt;
남은 answer에는 -1을 채운다.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812417-8cf76693-5f33-4d88-a1be-2e711c827abe.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;
import java.util.Stack;
import java.util.StringTokenizer;

class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int N = Integer.parseInt(br.readLine());
        int[] answer = new int[N];
        StringTokenizer st = new StringTokenizer(br.readLine(), &quot; &quot;);
        Stack&amp;lt;NGE&amp;gt; s = new Stack&amp;lt;&amp;gt;();

        for (int i = 0; i &amp;lt; N; i++) {
            int number = Integer.parseInt(st.nextToken());
            while (!s.isEmpty() &amp;amp;&amp;amp; number &amp;gt; s.peek().element) {
                answer[s.pop().position] = number;
            }
            s.push(new NGE(number, i));
        }

        for (int r : answer) {
            if (r == 0) r = -1;
            bw.write(r+&quot; &quot;);
        }
        bw.flush();
    }
}

class NGE {
    int element, position;

    public NGE(int element, int position) {
        this.element = element;
        this.position = position;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.*

fun main() {
    val N = readLine()!!.toInt()
    val input = readLine()!!.split(&quot; &quot;).map { it.toInt() }
    val stack = Stack&amp;lt;NGE&amp;gt;()
    val answer = MutableList(N) { -1 }

    repeat(N) { i -&amp;gt;
        val number = input[i]
        while (!stack.isEmpty() &amp;amp;&amp;amp; number &amp;gt; stack.peek().element) {
            answer[stack.pop().position] = number
        }
        stack.push(NGE(number, i))
    }

    print(answer.joinToString(&quot; &quot;))
}

data class NGE(
    val element: Int,
    val position: Int,
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/17298.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/17298.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/17298.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/17298.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 17298. 오큰수</summary></entry><entry><title type="html">BOJ 10799. 쇠막대기</title><link href="/boj/boj-10799/" rel="alternate" type="text/html" title="BOJ 10799. 쇠막대기" /><published>2021-02-09T00:00:00+09:00</published><updated>2021-02-09T00:00:00+09:00</updated><id>/boj/boj-10799</id><content type="html" xml:base="/boj/boj-10799/">&lt;h1 id=&quot;boj10799쇠막대기&quot;&gt;&lt;strong&gt;BOJ 10799. 쇠막대기&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812296-3db6e5cc-c4a6-4775-ba5c-eaec9beddac8.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812298-86f3d7b1-821c-47e9-86b4-f4386fbf3704.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812314-8f1e9fc9-e19d-4fa4-8b16-22e8314607c2.png&quot; alt=&quot;image&quot; /&gt;
레이저는 인접한 괄호쌍&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt;로 표현한다.&lt;br /&gt;
쇠막대기의 왼쪽 끝은 여는 괄호&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt;, 오른쪽 끝은 닫는괄호&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt;로 표현한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여는 괄호&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt;를 만났을 때는 Stack에 넣어준다.&lt;/li&gt;
  &lt;li&gt;닫는 괄호 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt;를 만났을때
    &lt;ul&gt;
      &lt;li&gt;Stack.peak()가 여는괄호&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt;일 경우 Stack.pop() 한 후 남은 Stack의 size가 잘린 쇠막대기의 개수가 된다.&lt;/li&gt;
      &lt;li&gt;Stack.peak()가 닫는괄호&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt;일 경우 Stack.pop() 한 후 쇠막대기의 개수를 +1 한다
        &lt;ul&gt;
          &lt;li&gt;이때 쇠막대기의 마지막 이므로 이미 왼쪽에 생긴 쇠막대기는 모두 세었으니, 세지 못한 1개만 더한다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;((()()))&lt;/code&gt;인 경우&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812324-5954e5aa-fc5e-4353-ab29-3e7bfa71330d.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812325-cc9a508f-f498-403c-9acc-c9e231474c0f.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812327-a6c2112f-0aa7-4865-acf2-65a382658d5e.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812329-87585b08-e390-4809-8f75-a063ec67f518.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;
import java.util.Stack;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String input = br.readLine();
        Stack&amp;lt;Character&amp;gt; stack = new Stack&amp;lt;&amp;gt;();
        int t = 0;

        for (int i = 0; i &amp;lt; input.length(); i++) {
            char c = input.charAt(i);
            if (c == '(') {
                stack.push(c);
            } else {
                stack.pop();
                if (input.charAt(i - 1) == '(') {
                    t += stack.size();
                } else {
                    t++;
                }
            }
        }

        System.out.print(t);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.*

fun main() {
    val input = readLine()!!
    val stack = Stack&amp;lt;Char&amp;gt;()
    var t = 0
    var before = ' '
    input.forEach { c -&amp;gt;
        if (c == '(') stack.push(c)
        else {
            stack.pop()
            t += if (before == '(') stack.size else 1
        }
        before = c
    }
    println(t)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/10799.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/10799.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/10799.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/10799.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 10799. 쇠막대기</summary></entry><entry><title type="html">BOJ 1676. 팩토리얼 0의 개수</title><link href="/boj/boj-1676/" rel="alternate" type="text/html" title="BOJ 1676. 팩토리얼 0의 개수" /><published>2021-02-09T00:00:00+09:00</published><updated>2021-02-09T00:00:00+09:00</updated><id>/boj/boj-1676</id><content type="html" xml:base="/boj/boj-1676/">&lt;h1 id=&quot;boj1676팩토리얼0의개수&quot;&gt;&lt;strong&gt;BOJ 1676. 팩토리얼 0의 개수&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813421-08326e60-44b2-43df-9734-54dadd48d2fb.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;0의 개수는 10을 의미하고 10은 2*5로 나타낼 수 있다.&lt;br /&gt;
팩토리얼을 소인수 분해하여 2의 개수 5의 개수를 구한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int countOfTwo = 0;
        int countOfFive = 0;
        for (int i = 1; i &amp;lt;= n; i++) {
            int target = i;
            while (target % 2 == 0) {
                countOfTwo++;
                target /= 2;
            }

            while (target % 5 == 0) {
                countOfFive++;
                target /= 5;
            }
        }

        System.out.println(Math.min(countOfTwo, countOfFive));
        sc.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 2는 무조건 5보다 많으므로 &lt;br /&gt;
5의 배수 개수만 구하는 방법도 존재한다&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);

        int n = s.nextInt();
        s.close();
        int count = 0;
        while (n &amp;gt;= 5) {
            count += n / 5;
            n /= 5;
        }
        System.out.println(count);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    val num = readLine()!!.toInt()
    println(num / 5 + num / 25 + num / 125)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/1676.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/1676.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/1676.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/1676.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 1676. 팩토리얼 0의 개수</summary></entry></feed>