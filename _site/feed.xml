<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-09-27T00:40:43+09:00</updated><id>/feed.xml</id><title type="html">Beom Log</title><subtitle>beomjo amazing website.</subtitle><author><name>beomjo</name></author><entry><title type="html">Jekyll, minimal-mistakes 테마를 적용하기</title><link href="/blogs/create-blog/" rel="alternate" type="text/html" title="Jekyll, minimal-mistakes 테마를 적용하기" /><published>2021-06-29T00:00:00+09:00</published><updated>2021-06-29T00:00:00+09:00</updated><id>/blogs/create-blog</id><content type="html" xml:base="/blogs/create-blog/">&lt;h2 id=&quot;설정&quot;&gt;설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Github Pages 호스팅을 위해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${GITHUB_ID}.github.io&lt;/code&gt; 라는 이름으로 리파지토리를 생성해야 한다&lt;/li&gt;
  &lt;li&gt;Gem을 이용해서 Jekyll 을 설치한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;테마-적용&quot;&gt;테마 적용&lt;/h2&gt;
&lt;p&gt;minimal-mistake &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/&quot;&gt;빠른 시작 가이드&lt;/a&gt;를 참고하여 진행한다.&lt;br /&gt;
&lt;a href=&quot;https://github.com/mmistakes/minimal-mistakes&quot;&gt;minimal-mistake&lt;/a&gt; Repository에서 소스를 가져와 옮긴다.&lt;br /&gt;
옮긴 후 다음 과정을 진행한다.&lt;/p&gt;

&lt;h3 id=&quot;불필요-내용-제거&quot;&gt;불필요 내용 제거&lt;/h3&gt;
&lt;p&gt;minimal-mistakes-jekyll repository에서 소스를 가져왔다면 불필요한 내용을 제거한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;.editorconfig&lt;/li&gt;
  &lt;li&gt;.gitattributes&lt;/li&gt;
  &lt;li&gt;.github&lt;/li&gt;
  &lt;li&gt;/docs&lt;/li&gt;
  &lt;li&gt;/test&lt;/li&gt;
  &lt;li&gt;CHANGELOG.md&lt;/li&gt;
  &lt;li&gt;minimal-mistakes-jekyll.gemspec&lt;/li&gt;
  &lt;li&gt;README.md&lt;/li&gt;
  &lt;li&gt;screenshot-layouts.png&lt;/li&gt;
  &lt;li&gt;screenshot.png&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;_config-파일-설정&quot;&gt;_config 파일 설정&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yaml&lt;/code&gt; 파일에서 아래와 값들을 설정해준다&lt;/p&gt;

&lt;h4 id=&quot;기본-구성&quot;&gt;기본 구성&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site Settings
minimal_mistakes_skin    : &quot;dark&quot;
title                    : &quot;Beom Log&quot;
name                     : &quot;취미코딩하는 개발자&quot;
description              : &quot;회사에서는 월급 받고 집에서는 취미로 코딩하는 개발자의 블로그&quot;
url                      : &quot;https://beomjo.github.io&quot;
baseurl                  : # 서브 경로가 있는 경우 기재
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;teaser와-logo-그림-파일&quot;&gt;teaser와 logo 그림 파일&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;teaser                   : &quot;/assets/images/bio.jpg&quot;
logo                     : # 최상단 메뉴 바에 사이트 로고 넣기
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;댓글&quot;&gt;댓글&lt;/h4&gt;
&lt;p&gt;블로그 댓글 기능 disqus, discourse, facebook, staticman, utterances 정도가 대표적이다. &lt;br /&gt;
GitHub Pages 자체적으로 댓글을 제공하고 있지 않기때문에 보통 외부 댓글 서비스를 연결해주는 방식을 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;comments:
  provider               : # 블로그 댓글 기능 false (default), &quot;disqus&quot;, &quot;discourse&quot;, &quot;facebook&quot;, &quot;staticman&quot;, &quot;staticman_v2&quot;, &quot;utterances&quot;, &quot;custom&quot;
  disqus:
    shortname            : # 블로그 댓글 기능 https://help.disqus.com/customer/portal/articles/466208-what-s-a-shortname-
  discourse:
    server               : # https://meta.discourse.org/t/embedding-discourse-comments-via-javascript/31963 , e.g.: meta.discourse.org
  facebook:
    # https://developers.facebook.com/docs/plugins/comments
    appid                :
    num_posts            : # 5 (default)
    colorscheme          : # &quot;light&quot; (default), &quot;dark&quot;
  utterances:
    theme                : # &quot;github-light&quot; (default), &quot;github-dark&quot;
    issue_term           : # &quot;pathname&quot; (default)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;저자-설정&quot;&gt;저자 설정&lt;/h4&gt;
&lt;p&gt;minimal-mistakes theme은 사이트 좌측 사이드바에 기본으로 사이트 저자 소개를 설정한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site Author
author:
  name             : &quot;beomjo&quot;
  avatar           : &quot;/assets/images/bio-photo.jpg&quot;
  bio              : &quot;beomjo dev log 🧑‍💻&quot;
  location         : &quot;South Korea&quot;
  email            :
  links:
    - label: &quot;Email&quot;
      icon: &quot;fas fa-fw fa-envelope-square&quot;
      url: &quot;qjatjr1108@gmail.com&quot;
    - label: &quot;Blog&quot;
      icon: &quot;fas fa-fw fa-link&quot;
      url: &quot;https://beomseok95.tistory.com/&quot;
    - label: &quot;GitHub&quot;
      icon: &quot;fab fa-fw fa-github&quot;
      url: &quot;https://github.com/beomjo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;저자-설정---footer&quot;&gt;저자 설정 - Footer&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Site Footer
footer:
  links:
    - label: &quot;GitHub&quot;
      icon: &quot;fab fa-fw fa-github&quot;
      url: &quot;https://github.com/beomjo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;블로그-표시방법-설정&quot;&gt;블로그 표시방법 설정&lt;/h4&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Outputting
permalink: /:categories/:title/
paginate: 5 # 첫 페이지에보여줄 최근 게시물 수를 지정
paginate_path: /page:num/
timezone: Asia/Seoul # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;포스트-쓰기&quot;&gt;포스트 쓰기&lt;/h2&gt;
&lt;p&gt;포스트는 특정 제목으로 작성되어야 한다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YYYY-MM-DD-{TITLE}.md&lt;/code&gt; 형식으로 파일명을 작성한다 . 
메타데이터를 위한 yaml 부분을 상단에작성하고, 본문을 위한 마크다운 부분을 그 아래에 작성한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: Jekyll, minimal-mistakes 테마를 적용하기
categories:
  - Blogs
tags:
  - Blog
  - Jekyll
  - minimal-mistakes
toc: true
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>beomjo</name></author><category term="Blogs" /><category term="Jekyll" /><category term="minimal-mistakes" /><summary type="html">설정 Github Pages 호스팅을 위해 ${GITHUB_ID}.github.io 라는 이름으로 리파지토리를 생성해야 한다 Gem을 이용해서 Jekyll 을 설치한다</summary></entry><entry><title type="html">BOJ 11052. 카드 구매하기</title><link href="/boj/boj-11052/" rel="alternate" type="text/html" title="BOJ 11052. 카드 구매하기" /><published>2021-02-23T00:00:00+09:00</published><updated>2021-02-23T00:00:00+09:00</updated><id>/boj/boj-11052</id><content type="html" xml:base="/boj/boj-11052/">&lt;h1 id=&quot;boj11052카드구매하기&quot;&gt;&lt;strong&gt;BOJ 11052. 카드 구매하기&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814383-623c5380-f664-4f53-b951-87b88dbe84dd.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814440-ea126d10-202d-4fcb-893a-312b4785f89c.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814385-41498557-c2ba-4081-b022-941a8ee8885b.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814462-c4cc5ae4-7dd4-44f2-8bc1-5b3f00657ca4.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;d[n] = N개의 카드를 갖기 위해 지불해야 하는 금액의 최댓값.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;카드 1개를 p[1]에 구매 -&amp;gt; 남은 카드의 수 i-1 -&amp;gt; p[1] + d[i-1]&lt;br /&gt;
카드 2개를 p[2]에 구매 -&amp;gt; 남은 카드의 수 i-2 -&amp;gt; p[2] + d[i-2]&lt;br /&gt;
카드 3개를 p[3]에 구매 -&amp;gt; 남은 카드의 수 i-3 -&amp;gt; p[3] + d[i-3]&lt;br /&gt;
..&lt;br /&gt;
..&lt;br /&gt;
카드 N개를 p[N]에 구매 -&amp;gt; 남은 카드의 수 i-N -&amp;gt; p[N] + d[i-N] &lt;/p&gt;

&lt;p&gt;이므로 범위는 1&amp;lt;= j = i 라는 범위가 성립한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;점화식&lt;br /&gt;
d[i] = max( d[i-1] + p[1] , d[i-2]+p[2] ……… )&lt;br /&gt;
d[i] = max(p[j] + d[i-j])  , ( 1 &amp;lt;= j &amp;lt;= i )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bottom-up&quot;&gt;&lt;strong&gt;Bottom-Up&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        int[] d = new int[n + 1];
        int[] p = new int[n + 1];

        for (int i = 1; i &amp;lt;= n; i++) {
            p[i] = sc.nextInt();
        }

        for (int i = 1; i &amp;lt;= n; i++) {
            for (int j = 1; j &amp;lt;= i; j++) {
                d[i] = Math.max(d[i], d[i - j] + p[j]);
            }
        }
        System.out.println(d[n]);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    val n = readLine()!!.toInt()
    val d = IntArray(n + 1) { 0 }
    val p = &quot;0 ${readLine()!!}&quot;.split(&quot; &quot;).map { it.toInt() }
    for (i in 1..n)
        for (j in 1..i) d[i] = max(d[i], d[i - j] + p[j])
    println(d[n])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;top-down&quot;&gt;&lt;strong&gt;Top-Down&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    static int[] d = new int[1001];
    static int[] p = new int[1001];

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for (int i = 1; i &amp;lt;= n; i++) {
            p[i] = sc.nextInt();
        }

        System.out.println(go(n));
    }

    static int go(int i) {
        if (i == 0) return 0;
        if (d[i] &amp;gt; 0) return d[i];

        for (int j = 1; j &amp;lt;= i; j++) {
            d[i] = Math.max(d[i], go(i - j) + p[j]);
        }
        return d[i];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.Math.max
import java.util.*

val d = IntArray(1001) { 0 }
val p = IntArray(1001) { 0 }

fun main() {
    val sc = Scanner(System.`in`)
    val n = sc.nextInt()
    for (i in 1..n) p[i] = sc.nextInt()
    println(go(n))
}

fun go(i: Int): Int {
    if (i == 0) return 0
    if (d[i] &amp;gt; 0) return d[i]
    for (j in 1..i) d[i] = max(d[i], go(i - j) + p[j])
    return d[i];
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;시간 복잡도&lt;/strong&gt;
1 장부터 n장까지 반복 = O(n)&lt;br /&gt;
각 i장의 최댓값 반복 = O(n)&lt;/p&gt;

&lt;p&gt;O(n) + O(n) = O(n^2) &lt;/p&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/48b8a2e9c77282ea27e84f102da90fda3299258a/BOJ/java/11052.java&quot;&gt;github.com/beomjo/algorithm-study/blob/48b8a2e9c77282ea27e84f102da90fda3299258a/BOJ/java/11052.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/48b8a2e9c7/BOJ/kotlin/11052.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/48b8a2e9c7/BOJ/kotlin/11052.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 11052. 카드 구매하기</summary></entry><entry><title type="html">BOJ 16194. 카드 구매하기 2</title><link href="/boj/boj-16194/" rel="alternate" type="text/html" title="BOJ 16194. 카드 구매하기 2" /><published>2021-02-23T00:00:00+09:00</published><updated>2021-02-23T00:00:00+09:00</updated><id>/boj/boj-16194</id><content type="html" xml:base="/boj/boj-16194/">&lt;h1 id=&quot;boj16194카드구매하기2&quot;&gt;&lt;strong&gt;BOJ 16194. 카드 구매하기 2&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814571-64f10588-ede5-4ec7-b7e2-39c5ed97c1f6.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814574-6339898e-bad7-419d-a4e9-cea444a2755f.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814578-55a62ac8-aad4-4ff6-9353-a64591177cba.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814580-1da17adc-89db-4c3e-ab1f-cb887815cf74.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;d[n] = 카드 N개를 갖기 위한 금액의 최솟값.&lt;/strong&gt;
카드 1개를 p[1]에 구매 -&amp;gt; 남은 카드의 수 i-1 -&amp;gt; p[1] + d[i-1]&lt;br /&gt;
카드 2개를 p[2]에 구매 -&amp;gt; 남은 카드의 수 i-2 -&amp;gt; p[2] + d[i-2]&lt;br /&gt;
카드 3개를 p[3]에 구매 -&amp;gt; 남은 카드의 수 i-3 -&amp;gt; p[3] + d[i-3]&lt;br /&gt;
..&lt;br /&gt;
..&lt;br /&gt;
카드 N개를 p[N]에 구매 -&amp;gt; 남은 카드의 수 i-N -&amp;gt; p[N] + d[i-N] &lt;/p&gt;

&lt;p&gt;이므로 범위는 1&amp;lt;= j = i 라는 범위가 성립한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;점화식&lt;br /&gt;
d[i] = min( d[i-1] + p[1] , d[i-2]+p[2] ……… )&lt;br /&gt;
d[i] = min(p[j] + d[i-j])  , ( 1 &amp;lt;= j &amp;lt;= i )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bottom-up&quot;&gt;&lt;strong&gt;Bottom-Up&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        int[] d = new int[n + 1];
        int[] p = new int[n + 1];

        for (int i = 1; i &amp;lt;= n; i++) {
            p[i] = sc.nextInt();
        }

        d[0] = 0;
        for (int i = 1; i &amp;lt;= n; i++) {
            d[i] = p[i];
            for (int j = 1; j &amp;lt;= i; j++) {
                d[i] = Math.min(d[i], d[i - j] + p[j]);
            }
        }

        System.out.println(d[n]);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.*

fun main() {
    val sc = Scanner(System.`in`)
    val n = sc.nextInt()

    val d = IntArray(n + 1) { 0 }
    val p = IntArray(n + 1) { 0 }

    for (i in 1..n) p[i] = sc.nextInt()

    for (i in 1..n) {
        d[i] = p[i]
        for (j in 1..i) {
            d[i] = kotlin.math.min(d[i], d[i - j] + p[j]);
        }
    }

    println(d[n])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;top-down&quot;&gt;&lt;strong&gt;Top-Down&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Arrays;
import java.util.Scanner;

class Main {
    static int[] d = new int[1001];
    static int[] p = new int[1001];
    static int maxValue = 1000 * 10000;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for (int i = 1; i &amp;lt;= n; i++) {
            p[i] = sc.nextInt();
        }
        Arrays.fill(d, maxValue);

        sc.close();
        System.out.println(go(n));
    }

    static int go(int i) {
        if (i == 0) return 0;
        if (d[i] != maxValue) return d[i];

        for (int j = 1; j &amp;lt;= i; j++) {
            d[i] = Math.min(d[i], go(i - j) + p[j]);
        }

        return d[i];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.*

val maxValue = 1000 * 10000
val d = IntArray(1001) { maxValue }
val p = IntArray(1001) { 0 }

fun main() {
    val sc = Scanner(System.`in`)
    val n = sc.nextInt()
    for (i in 1..n) p[i] = sc.nextInt()
    println(go(n))
}

fun go(i: Int): Int {
    if (i == 0) return 0
    if (d[i] != maxValue) return d[i]
    for (j in 1..i) d[i] = kotlin.math.min(d[i], go(i - j) + p[j])
    return d[i];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/2c55da78e6c32999db1d586ac95660b8774e4653/BOJ/java/16194.java&quot;&gt;github.com/beomjo/algorithm-study/blob/2c55da78e6c32999db1d586ac95660b8774e4653/BOJ/java/16194.java&lt;/a&gt;
[github.com/beomjo/algorithm-study/blob/2c55da78e6/BOJ/kotlin/16194.kt](https://github.com/beomjo/algorithm-study/blob/2c55da78e6/BOJ/kotlin/16194.kt&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 16194. 카드 구매하기 2</summary></entry><entry><title type="html">BOJ 1463. 1로만들기</title><link href="/boj/boj-1463/" rel="alternate" type="text/html" title="BOJ 1463. 1로만들기" /><published>2021-02-22T00:00:00+09:00</published><updated>2021-02-22T00:00:00+09:00</updated><id>/boj/boj-1463</id><content type="html" xml:base="/boj/boj-1463/">&lt;h1 id=&quot;boj14631로만들기&quot;&gt;&lt;strong&gt;BOJ 1463. 1로 만들기&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814062-b7cf724e-9ef8-45eb-9ce6-4af457e5fd0c.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;d[n]= 1로 만드는 연산을 하는 최솟값&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;점화식&lt;br /&gt;
d[n] = min(d[n-1] +1 , d[n2] + 1, d[n3] + 1 ) &lt;/p&gt;

  &lt;p&gt;대략적인 논리로, 그대로 쓰지는 않고&lt;br /&gt;
2나 3으로 나누어 떨어지는지 확인 조건문으로 처리 필요&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bottom-up&quot;&gt;&lt;strong&gt;Bottom-Up&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;입력이 1일때는 어떠한 연산도 할 필요가 없으므로&lt;br /&gt;
d[1]에 0을 넣어 시작한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;
import java.util.Scanner;

class Main {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int[] d = new int[10000001];
        int n = sc.nextInt();

        d[1] = 0;
        for (int i = 2; i &amp;lt;= n; i++) {
            d[i] = d[i - 1] + 1;
            if (i % 2 == 0 &amp;amp;&amp;amp; d[i] &amp;gt; d[i / 2] + 1) {
                d[i] = d[i / 2] + 1;
            }
            if (i % 3 == 0 &amp;amp;&amp;amp; d[i] &amp;gt; d[i / 3] + 1) {
                d[i] = d[i / 3] + 1;
            }
        }
        System.out.println(d[n]);
        sc.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    val d = IntArray(1000001) { 0 }
    val n = readLine()!!.toInt()

    d[1] = 0
    (2..n).forEach { i -&amp;gt;
        d[i] = d[i - 1] + 1

        if (i % 2 == 0 &amp;amp;&amp;amp; d[i] &amp;gt; d[i / 2] + 1) {
            d[i] = d[i / 2] + 1
        }

        if (i % 3 == 0 &amp;amp;&amp;amp; d[i] &amp;gt; d[i / 3] + 1) {
            d[i] = d[i / 3] + 1
        }
    }

    println(d[n])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;top-down&quot;&gt;&lt;strong&gt;Top-Down&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    static int[] d = new int[1000001];

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(go(n));
    }

    static int go(int i) {
        if (i == 1) return 0;
        if (d[i] &amp;gt; 0) return d[i];

        d[i] = go(i - 1) + 1;

        if (i % 2 == 0) {
            int temp = go(i / 2) + 1;
            if (d[i] &amp;gt; temp) d[i] = temp;
        }

        if (i % 3 == 0) {
            int temp = go(i / 3) + 1;
            if (d[i] &amp;gt; temp) d[i] = temp;
        }
        return d[i];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val d = IntArray(1000001) { 0 }

fun main() {
    println(go(readLine()!!.toInt()))
}

fun go(i: Int): Int {
    if (i == 1) return 0
    if (d[i] &amp;gt; 0) return d[i]

    d[i] = go(i - 1) + 1
    if (i % 2 == 0) (go(i / 2) + 1).let { if (d[i] &amp;gt; it) d[i] = it }
    if (i % 3 == 0) (go(i / 3) + 1).let { if (d[i] &amp;gt; it) d[i] = it }

    return d[i]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/1463.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/1463.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/1463.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/1463.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 1463. 1로 만들기</summary></entry><entry><title type="html">BOJ 9095. 1, 2, 3 더하기</title><link href="/boj/boj-9095/" rel="alternate" type="text/html" title="BOJ 9095. 1, 2, 3 더하기" /><published>2021-02-22T00:00:00+09:00</published><updated>2021-02-22T00:00:00+09:00</updated><id>/boj/boj-9095</id><content type="html" xml:base="/boj/boj-9095/">&lt;h1 id=&quot;boj-9095-1-2-3-더하기&quot;&gt;&lt;strong&gt;BOJ 9095. 1, 2, 3 더하기&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814285-981a7caa-3921-4712-842e-2fb3158e1d2b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;d[n] = 1, 2, 3의 합으로 나타내는 방법의 수&lt;/strong&gt;
앞부분들은 겹치는 부분들로 memo 해놓고 계속 사용하게 되니&lt;br /&gt;
맨 마지막에 올 수 있는 1, 2, 3의 방법의 수만 찾아보면 된다.&lt;/p&gt;

&lt;p&gt;d[n] = O + O + O + …. = n 이므로&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(n -1 ) + 1  = n&lt;/li&gt;
  &lt;li&gt;(n -2 ) + 2  = n&lt;/li&gt;
  &lt;li&gt;(n -3 ) + 3  = n&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같이 3개의 방법이 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;점화식&lt;br /&gt;
d[n] = d[n-1] + d[n-2] + d[n -3]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bottom-up&quot;&gt;&lt;strong&gt;Bottom-Up&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int[] d = new int[11];
        d[0] = 1;
        d[1] = 1;
        d[2] = 2;
        for (int i = 3; i &amp;lt; 11; i++) {
            d[i] = d[i - 1] + d[i - 2] + d[i - 3];
        }
        while (t-- &amp;gt; 0) {
            int n = sc.nextInt();
            System.out.println(d[n]);
        }
        sc.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    val d = IntArray(11) { 0 }
    d[0] = 1
    d[1] = 1
    d[2] = 2
    for (i in 3..10) d[i] = d[i - 1] + d[i - 2] + d[i - 3]
    repeat(readLine()!!.toInt()) { println(d[readLine()!!.toInt()]) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;top-down&quot;&gt;&lt;strong&gt;Top-Down&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    static int[] d = new int[11];

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- &amp;gt; 0) {
            System.out.println(go(sc.nextInt()));
        }
    }

    static int go(int i) {
        if (i == 0) return 1; // 0일때 방법은 1개로 침
        if (i == 1) return 1;
        if (i == 2) return 2;
        if (d[i] &amp;gt; 0) return d[i];
        d[i] = go(i - 1) + go(i - 2) + go(i - 3);
        return d[i];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val d = IntArray(11) { 0 }

fun main() {
    repeat(readLine()!!.toInt()) {
        println(go(readLine()!!.toInt()))
    }
}

fun go(i: Int): Int {
    if (i == 0) return 1 // 0일때 방법은 1개로 침
    if (i == 1) return 1
    if (i == 2) return 2
    if (d[i] &amp;gt; 0) return d[i]
    d[i] = go(i - 1) + go(i - 2) + go(i - 3)
    return d[i]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/9095.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/9095.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/9095.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/9095.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 9095. 1, 2, 3 더하기</summary></entry><entry><title type="html">BOJ 11726. 2xn 타일링</title><link href="/boj/boj-11726/" rel="alternate" type="text/html" title="BOJ 11726. 2xn 타일링" /><published>2021-02-22T00:00:00+09:00</published><updated>2021-02-22T00:00:00+09:00</updated><id>/boj/boj-11726</id><content type="html" xml:base="/boj/boj-11726/">&lt;h1 id=&quot;boj117262xn타일링&quot;&gt;&lt;strong&gt;BOJ 11726. 2xn 타일링&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814181-3a4161b1-1fbe-48e2-9ea7-adcf5c7840f5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;d[n] = 2*n 크기의 직사각형을 채우는 방법의 수&lt;/strong&gt;
앞부분들은 겹치는 부분들로 memo 해놓고 계속 사용하게 되니&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814182-8c33bcc0-6a9d-47ca-8baa-0aa88cede0ed.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;점화식&lt;br /&gt;
d[n] = d[n-1] + d[n-2]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;또한 d가 1일 때 방법은 1개이므로, d[1] = 1&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814184-10fb8bfc-1435-4469-8d86-3845be02cb7d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;d가 2일 때 방법은 1개이므로, d[2] = 2&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134814186-c7be4365-85f2-4006-909e-9989e91901a9.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bottom-up&quot;&gt;&lt;strong&gt;Bottom-Up&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] d = new int[n + 1];
        d[1] = 1;
        d[2] = 2;
        for (int i = 3; i &amp;lt;= n; i++) {
            d[i] = (d[i - 1] + d[i - 2]) % 10007;
        }
        System.out.println(d[n]);
        sc.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    val n = readLine()!!.toInt()
    val d = IntArray(n + 1) { 0 }
    d[1] = 1
    d[2] = 2
    for (i in 3..n) d[i] = (d[i - 1] + d[i - 2]) % 10007
    println(d[n])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;top-down&quot;&gt;&lt;strong&gt;Top-Down&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    static int[] d = new int[1001];

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println(go(sc.nextInt()));
    }

    static int go(int i) {
        if (i == 1) return 1;
        if (i == 2) return 2;
        if (d[i] &amp;gt; 0) return d[i];
        d[i] = (go(i - 1) + go(i - 2)) % 10007;
        return d[i];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val d = IntArray(1001) { 0 }

fun main() {
    println(go(readLine()!!.toInt()))
}

fun go(i: Int): Int {
    if (i == 1) return 1
    if (i == 2) return 2
    if (d[i] &amp;gt; 0) return d[i]
    d[i] = (go(i - 1) + go(i - 2)) % 10007
    return d[i]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/11726.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/11726.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/11726.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/11726.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 11726. 2xn 타일링</summary></entry><entry><title type="html">BOJ 9613. GCD 합</title><link href="/boj/boj-9613/" rel="alternate" type="text/html" title="BOJ 9613. GCD 합" /><published>2021-02-16T00:00:00+09:00</published><updated>2021-02-16T00:00:00+09:00</updated><id>/boj/boj-9613</id><content type="html" xml:base="/boj/boj-9613/">&lt;h1 id=&quot;boj9613gcd합&quot;&gt;&lt;strong&gt;BOJ 9613. GCD 합&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813532-dcef875e-31d4-49e9-a6a1-dda14dbd2ab0.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;첫 줄에는 테스트 케이스 개수 t(1&amp;lt;=t&amp;lt;100)이 주어지고  
그다음 줄부터 테스트 케이스를 입력받는다.&lt;br /&gt;
첫 줄에 테스트를 할 수의 개수 n (1&amp;lt;n&amp;lt;=100)이 주어지고, 그다음 n개의 수가 주어진다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4 10 20 30 40&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;10과 20의 최대공약수, 20과 30의 최대공약수, 30과 40의 최대공약수를 각각 구하여 모두 더한다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- &amp;gt; 0) {
            int tc = sc.nextInt();
            int[] arr = new int[tc];
            long sum = 0;

            for (int i = 0; i &amp;lt; tc; i++) {
                arr[i] = sc.nextInt();
            }

            for (int i = 0; i &amp;lt; tc; i++) {
                for (int j = i + 1; j &amp;lt; tc; j++) {
                    sum += getGCD(arr[i], arr[j]);
                }
            }
            System.out.println(sum);
        }
        sc.close();
    }

    static int getGCD(int a, int b) {
        while (b != 0) {
            int r = a % b;
            a = b;
            b = r;
        }
        return a;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    repeat(readLine()!!.toInt()) {
        val arr = readLine()!!.split(&quot; &quot;).map { it.toLong() }
        val sum = (1 until arr.size).map { i -&amp;gt;
            (1 until i).map { j -&amp;gt;
                getGCD(arr[i], arr[j])
            }.sum()
        }.sum()
        println(sum)
    }

}

fun getGCD(a: Long, b: Long): Long = if (b == 0L) a else getGCD(b, a % b)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/9613.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/9613.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/9613.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/9613.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 9613. GCD 합</summary></entry><entry><title type="html">BOJ 17087. 숨바꼭질 6</title><link href="/boj/boj-17087/" rel="alternate" type="text/html" title="BOJ 17087. 숨바꼭질 6" /><published>2021-02-16T00:00:00+09:00</published><updated>2021-02-16T00:00:00+09:00</updated><id>/boj/boj-17087</id><content type="html" xml:base="/boj/boj-17087/">&lt;h2 id=&quot;boj17087숨바꼭질6&quot;&gt;&lt;strong&gt;BOJ 17087. 숨바꼭질 6&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813665-ea78c50e-0d04-4a56-adee-9cce242c164b.png&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813668-0e937230-70cd-4cd4-a317-c0bc89ab713e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;첫 줄에  N(동생의 수), S(현재 위치)가 주어지고&lt;br /&gt;
둘째 줄에 동생들의 위치가 주어진다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3 3 // 동생의수 3, 현재위치 3
1 7 11 // 동생들의 위치
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;현재 위치 3에서 동생들의 위치 (1, 7, 11)까지의 각각 거리를 계산하여 배열에 저장한다.&lt;br /&gt;
배열에 저장된 현재 위치와의 거리 차이들의 최대 공약수가 이동할 수 있는 최대 거리 D가 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int s = sc.nextInt();
        int[] distances = new int[n];
        for (int i = 0; i &amp;lt; n; i++) {
            int b = sc.nextInt();
            distances[i] = Math.abs(s - b);
        }
        int result = distances[0];
        for (int i = 1; i &amp;lt; n; i++) {
            result = getGCD(result, distances[i]);
        }
        System.out.println(result);
        sc.close();
    }
    
    static int getGCD(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return getGCD(b, a % b);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import kotlin.math.abs

fun main() {
    val (n, s) = readLine()!!.split(&quot; &quot;)
    val distances = readLine()!!.split(&quot; &quot;)
        .map { it.toInt() }
        .map { s.toInt() - it }
        .map { abs(it) }
    var result = distances[0]
    (1 until n.toInt()).forEach {
        result = getGCD(result, distances[it])
    }
    println(result)
}

fun getGCD(a: Int, b: Int): Int = if (b == 0) a else getGCD(b, a % b)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/17087.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/17087.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/17087.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/17087.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 17087. 숨바꼭질 6</summary></entry><entry><title type="html">BOJ 2745, 11005, 1373, 1212, 2089 진법변환하기</title><link href="/boj/boj-2745-11005-1373-1212-2089/" rel="alternate" type="text/html" title="BOJ 2745, 11005, 1373, 1212, 2089 진법변환하기" /><published>2021-02-16T00:00:00+09:00</published><updated>2021-02-16T00:00:00+09:00</updated><id>/boj/boj-2745-11005-1373-1212-2089</id><content type="html" xml:base="/boj/boj-2745-11005-1373-1212-2089/">&lt;h1 id=&quot;boj247311005137312122089진법-변환하기&quot;&gt;&lt;strong&gt;BOJ 2473, 11005, 1373, 1212, 2089 진법 변환하기&lt;/strong&gt; &lt;/h1&gt;

&lt;h2 id=&quot;boj-2745진법-변환--n진법의-수를-10진법으로-변경하기&quot;&gt;&lt;strong&gt;BOJ 2745. 진법 변환 ( N진법의 수를 10진법으로 변경하기)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813790-c97936d0-6953-41bb-8f04-bc5fdc944c89.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;풀이&lt;/strong&gt;
B 진법의 수 N과, B가 주어진다.&lt;br /&gt;
10진법을 넘어가는 수는 &lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A:10
B:11
C:12
D:13
..
..
..
Y:34
Z:35
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 A-Z로 표현한다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZZZZZ 36&lt;/code&gt;을 입력하였다면 36진법으로 표시된 문자열&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZZZZZ&lt;/code&gt;이므로&lt;br /&gt;
입력받은 문자열을 반복문을 통해 char를 처음부터 확인한다.&lt;/p&gt;

&lt;p&gt;char문자를 그대로 int로 캐스팅하면 &lt;br /&gt;
char값은 아스키코드값으로 변경되기 때문에 Z는 35가 아닌 90으로 변경되게 된다.&lt;/p&gt;

&lt;p&gt;아스키코드표를 참고하여 &lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813794-22723d60-d460-4eff-a366-5b01b60b90ad.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;0~9이라면  
    &lt;ul&gt;
      &lt;li&gt;char - ‘0’&lt;/li&gt;
      &lt;li&gt;char - 48&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A-Z이라면
    &lt;ul&gt;
      &lt;li&gt;char - ‘A’ +10&lt;/li&gt;
      &lt;li&gt;char - 55&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; 또는&lt;/p&gt;

&lt;p&gt;Character wrapper class의 메서드인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Character.getNumericValue(c);&lt;/code&gt;을 사용하여 10진수 숫자로 변경한다.&lt;br /&gt;
10진수 숫자를 얻었다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B^(자리수 - 1)&lt;/code&gt;을 곱한다.&lt;br /&gt;
즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZZZZZ&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(35\* 35^4) + (35\*35^3) + (35\*35^2) + (35\*35^1) + \+ (35\*35^0)&lt;/code&gt;이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;
import java.util.Scanner;

class Main {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);

        String n = sc.next();
        int b = sc.nextInt();

        int answer = 0;

        for (int i = 0; i &amp;lt; n.length(); i++) {
            char c = n.charAt(i);
            int r = 0;
            if (c &amp;gt;= 'A' &amp;amp;&amp;amp; c &amp;lt;= 'Z') {
                r += (c - 'A' + 10);
            } else {
                r += (c - '0');
            }
            answer += r * Math.pow(b, n.length() - 1 - i);
        }

        System.out.println(answer);
        sc.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import kotlin.math.pow

fun main() {
    val (n, b) = readLine()!!.split(&quot; &quot;)
    n.foldIndexed(0) { i, aar, c -&amp;gt;
        val r = if (c in 'A'..'Z') (c - 'A' + 10) else (c - '0')
        aar + (r * b.toDouble().pow(n.length - 1 - i)).toInt()
    }.let(::println)
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;boj-11005진법-변환-2-10진법의-수를-n진법으로-변경하기&quot;&gt;&lt;strong&gt;BOJ 11005.  진법 변환 2( 10진법의 수를 N진법으로 변경하기)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813801-7744865c-7c08-44cb-a3aa-215af96c6c43.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;풀이&lt;/strong&gt;
10진법의 수 N을  B진법으로 변환한다.&lt;/p&gt;

&lt;p&gt;입력받은 10진법의 수를 B로 나누고,&lt;br /&gt;
나머지가 10 보다 큰지 (A-Z)&lt;br /&gt;
나머지가 10 보다 작은지 (0-9)인지를 구분하여 나머지를 기록한다.&lt;br /&gt;
N을 B로 더 이상 나눌 수 없을 때까지 나머지를 기록한다.
그 후 기록한 나머지를 거꾸로 출력한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;
import java.util.Scanner;

class Main {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int b = sc.nextInt();

        StringBuilder answer = new StringBuilder();

        while (n &amp;gt; 0) {
            long rest = n % b;
            if (rest &amp;gt;= 10) {
                answer.append((char) ((rest - 10) + 'A'));
            } else {
                answer.append((char) (rest + '0'));
            }
            n /= b;
        }
        System.out.println(answer.reverse().toString());
        sc.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun main() {
    var (n, b) = readLine()!!.split(&quot; &quot;).map { it.toInt() }
    var answer = &quot;&quot;
    while (n &amp;gt; 0) {
        val rest = n % b
        answer += when (rest) {
            in 0..9 -&amp;gt; rest
            else -&amp;gt; ('A' + (rest - 10))
        }.toString()
        n /= b
    }
    println(answer.reversed())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;boj-13732진수-8진수--2진수를-8진수로-변환&quot;&gt;&lt;strong&gt;BOJ 1373.  2진수 8진수 ( 2진수를 8진수로 변환)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813812-c4d9ba6c-45e0-4df3-b136-286c3b99cd08.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;풀이&lt;/strong&gt;
입력받은 8 진수의 수가 3자리씩 끊어지는지 확인하여   &lt;br /&gt;
끊어지지 않는다면 맨 앞에 0을 추가한다.&lt;br /&gt;
맨 뒤부터 각 자리의 값들을 계산하여 더한 후 기록한다.&lt;br /&gt;
기록한 값을 거꾸로 출력한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;
import java.util.Stack;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        String input = br.readLine();
        Stack&amp;lt;Integer&amp;gt; stack = new Stack&amp;lt;&amp;gt;();

        if (input.length() % 3 != 0) {
            for (int i = 0; i &amp;lt; input.length() % 3; i++) {
                input = &quot;0&quot; + input;
            }
        }
        for (int i = input.length() - 1; i &amp;gt; 0; i -= 3) {
            int oneSeat = Character.getNumericValue(input.charAt(i));
            int twoSeat = Character.getNumericValue(input.charAt(i - 1));
            int fourSeat = Character.getNumericValue(input.charAt(i - 2));
            stack.push(oneSeat + twoSeat * 2 + fourSeat * 4);
        }
        while (!stack.isEmpty()) {
            bw.write(stack.pop().toString());
        }
        bw.flush();
        bw.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;단순하게 BigInteger를 이용하는 방법도 있다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.math.BigInteger

fun main() {
    val b = BigInteger(readLine()!!, 2)
    println(b.toString(8))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;boj-12128진수-2진수8진수를-2진수로-변환&quot;&gt;&lt;strong&gt;BOJ 1212. 8진수 2진수(8진수를 2진수로 변환)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813818-ffb3b74c-740d-4adc-a11c-3f03aec2556b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;풀이&lt;/strong&gt;
8진법(8가지)에서 2진법으로 변환한 배열을 만든다.&lt;br /&gt;
현재 진법의 자리 수마다 2진법으로 바꾸어 이어 붙인다. &lt;strong&gt;제일 앞쪽의 0을 제거한다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;
import java.util.Scanner;

class Main {
    static String[] octToBin = {&quot;000&quot;, &quot;001&quot;, &quot;010&quot;, &quot;011&quot;, &quot;100&quot;, &quot;101&quot;, &quot;110&quot;, &quot;111&quot;};
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        StringBuilder sb = new StringBuilder();

        char[] oct = sc.next().toCharArray();

        if (oct.length == 1 &amp;amp;&amp;amp; oct[0] == '0') {
            System.out.println(0);
            return;
        }

        for (char c : oct) {
            sb.append(octToBin[c - '0']);
        }

        while (sb.charAt(0) == '0') {
            sb.deleteCharAt(0);
        }
        System.out.println(sb.toString());
        sc.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val octToBin: List&amp;lt;String&amp;gt; = listOf(&quot;000&quot;, &quot;001&quot;, &quot;010&quot;, &quot;011&quot;, &quot;100&quot;, &quot;101&quot;, &quot;110&quot;, &quot;111&quot;)
fun main() {
    readLine()!!.toCharArray().let { arr -&amp;gt;
        if (arr.size == 1 &amp;amp;&amp;amp; arr[0] == '0') &quot;0&quot;
        else arr.joinToString(&quot;&quot;) { c -&amp;gt; octToBin[c - '0'] }
            .let { it.substring(it.indexOf('1')) }
    }.let(::println)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;boj-2089-2진수&quot;&gt;&lt;strong&gt;BOJ 2089. -2진수&lt;/strong&gt; &lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134813821-c36c47db-daa4-4462-b951-c031291ec55a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;풀이&lt;/strong&gt;
보통의 10진법에서 2진법으로 변환하는 방법을 따르지만 &lt;strong&gt;나눈 몫을 올림 하여 처리한다.&lt;/strong&gt;&lt;br /&gt;
10진법의 수 N을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-13&lt;/code&gt;을 입력으로 받았을 때, N이 0이 될 때까지 -2로 나눈나머지를 계속 저장하고, 나눈 몫을 올림 하여 계속 이어간다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-13) % (-2) = 1&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;나머지 1 맨 앞에 저장&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-13) / (-2 ) = 6.5&lt;/code&gt; -&amp;gt; 반올림 7&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(7) % (-2) = -1&lt;/code&gt; -&amp;gt; 절댓값 1
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;나머지 1 맨 앞에 저장&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(7) / (-2) = - 3.5&lt;/code&gt; -&amp;gt; 반올림 -3&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-3) % (-2) = -1&lt;/code&gt;-&amp;gt; 절댓값 1
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;나머지 1 맨 앞에 저장&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-3) / (-2) = 1.5&lt;/code&gt; -&amp;gt; 반올림 2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(2) % (-2) = 0&lt;/code&gt; 
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;0 맨 앞에 저장&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(2) / (-2) = -1&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-1) % (-2) = -1&lt;/code&gt;-&amp;gt;절댓값 1
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;나머지 1 맨 앞에 저장&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(-1) / (-2) = 0.5&lt;/code&gt; -&amp;gt; 반올림 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(1) % (-2) = 1&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;나머지 1 맨 앞에 저장&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(1) / (-2) = -0.5&lt;/code&gt; -&amp;gt; 반올림 -0.0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 과정을 거친 후에 110111이라는 -2 진법의 수를 출력한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;
import java.util.Scanner;

class Main {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        StringBuilder sb = new StringBuilder();

        long n = sc.nextLong();

        if (n == 0) {
            System.out.println(0);
            return;
        }

        while (n != 0) {
            sb.insert(0, Math.abs(n % -2));
            n = (long) Math.ceil((double) n / -2);
        }

        System.out.println(sb.toString());
        sc.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.StringBuilder
import kotlin.math.abs
import kotlin.math.ceil

fun main() {
    var n = readLine()!!.toInt()
    if (n == 0) {
        println(n)
        return
    }
    val sb = StringBuilder()
    while (n != 0) {
        sb.insert(0, abs(n % -2))
        n = ceil(n.toDouble() / -2).toInt()
    }

    println(sb)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 2473, 11005, 1373, 1212, 2089 진법 변환하기 </summary></entry><entry><title type="html">BOJ 10799. 쇠막대기</title><link href="/boj/boj-10799/" rel="alternate" type="text/html" title="BOJ 10799. 쇠막대기" /><published>2021-02-09T00:00:00+09:00</published><updated>2021-02-09T00:00:00+09:00</updated><id>/boj/boj-10799</id><content type="html" xml:base="/boj/boj-10799/">&lt;h1 id=&quot;boj10799쇠막대기&quot;&gt;&lt;strong&gt;BOJ 10799. 쇠막대기&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812296-3db6e5cc-c4a6-4775-ba5c-eaec9beddac8.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812298-86f3d7b1-821c-47e9-86b4-f4386fbf3704.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;풀이&quot;&gt;&lt;strong&gt;풀이&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812314-8f1e9fc9-e19d-4fa4-8b16-22e8314607c2.png&quot; alt=&quot;image&quot; /&gt;
레이저는 인접한 괄호쌍&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt;로 표현한다.&lt;br /&gt;
쇠막대기의 왼쪽 끝은 여는 괄호&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt;, 오른쪽 끝은 닫는괄호&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt;로 표현한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여는 괄호&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt;를 만났을 때는 Stack에 넣어준다.&lt;/li&gt;
  &lt;li&gt;닫는 괄호 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt;를 만났을때
    &lt;ul&gt;
      &lt;li&gt;Stack.peak()가 여는괄호&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(&lt;/code&gt;일 경우 Stack.pop() 한 후 남은 Stack의 size가 잘린 쇠막대기의 개수가 된다.&lt;/li&gt;
      &lt;li&gt;Stack.peak()가 닫는괄호&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt;일 경우 Stack.pop() 한 후 쇠막대기의 개수를 +1 한다
        &lt;ul&gt;
          &lt;li&gt;이때 쇠막대기의 마지막 이므로 이미 왼쪽에 생긴 쇠막대기는 모두 세었으니, 세지 못한 1개만 더한다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;((()()))&lt;/code&gt;인 경우&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812324-5954e5aa-fc5e-4353-ab29-3e7bfa71330d.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812325-cc9a508f-f498-403c-9acc-c9e231474c0f.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812327-a6c2112f-0aa7-4865-acf2-65a382658d5e.png&quot; alt=&quot;image&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/39984656/134812329-87585b08-e390-4809-8f75-a063ec67f518.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.*;
import java.util.Stack;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String input = br.readLine();
        Stack&amp;lt;Character&amp;gt; stack = new Stack&amp;lt;&amp;gt;();
        int t = 0;

        for (int i = 0; i &amp;lt; input.length(); i++) {
            char c = input.charAt(i);
            if (c == '(') {
                stack.push(c);
            } else {
                stack.pop();
                if (input.charAt(i - 1) == '(') {
                    t += stack.size();
                } else {
                    t++;
                }
            }
        }

        System.out.print(t);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.*

fun main() {
    val input = readLine()!!
    val stack = Stack&amp;lt;Char&amp;gt;()
    var t = 0
    var before = ' '
    input.forEach { c -&amp;gt;
        if (c == '(') stack.push(c)
        else {
            stack.pop()
            t += if (before == '(') stack.size else 1
        }
        before = c
    }
    println(t)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;풀이소스&quot;&gt;풀이소스&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/java/10799.java&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/java/10799.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/10799.kt&quot;&gt;github.com/beomjo/algorithm-study/blob/main/BOJ/kotlin/10799.kt&lt;/a&gt;&lt;/p&gt;</content><author><name>beomjo</name></author><category term="BOJ" /><category term="Algorithm" /><category term="BOJ" /><summary type="html">BOJ 10799. 쇠막대기</summary></entry></feed>